coef(summary(fit.c))
library(MuMIn)
?dredge
all.c <- dredge(fit.c)
?na.action
fit.c <- lm(LRR.C ~ MAP + MAT + SOLAR.INS + SOIL.PCT.N + TREATMENT + MAP:TREATMENT + MAT:TREATMENT + SOLAR.INS:TREATMENT + SOIL.PCT.N:TREATMENT, data=exp1, na.action = "na.omit")
coef(summary(fit.c))
all.c <- dredge(fit.c)
fit.c <- lm(LRR.C ~ MAP + MAT + SOLAR.INS + SOIL.PCT.N + TREATMENT + MAP:TREATMENT + MAT:TREATMENT + SOLAR.INS:TREATMENT + SOIL.PCT.N:TREATMENT, data=exp1, na.action = "na.fail")
fit.c <- lm(LRR.C ~ MAP + MAT + SOLAR.INS + SOIL.PCT.N + TREATMENT + MAP:TREATMENT + MAT:TREATMENT + SOLAR.INS:TREATMENT + SOIL.PCT.N:TREATMENT, data=exp1, na.action = "na.omit")
coef(summary(fit.c))
all.c <- dredge(fit.c)
?na.action
fit.c <- lm(LRR.C ~ MAP + MAT + SOLAR.INS + SOIL.PCT.N + TREATMENT + MAP:TREATMENT + MAT:TREATMENT + SOLAR.INS:TREATMENT + SOIL.PCT.N:TREATMENT, data=exp1, na.action = "na.fail")
fit.c <- lm(LRR.C ~ MAP + MAT + SOLAR.INS + SOIL.PCT.N + TREATMENT + MAP:TREATMENT + MAT:TREATMENT + SOLAR.INS:TREATMENT + SOIL.PCT.N:TREATMENT, data=exp1[!is.na(LRR.C)], na.action = "na.fail")
coef(summary(fit.c))
all.c <- dredge(fit.c)
?dredge
ma.c <- model.avg(all.c)
all.c <- dredge(fit.c)
exp1.c <- exp1[!is.na(LRR.C),] # dredge can't seem to do this.
fit.c <- lm(LRR.C ~ MAP + MAT + SOLAR.INS + SOIL.PCT.N + TREATMENT + MAP:TREATMENT + MAT:TREATMENT + SOLAR.INS:TREATMENT + SOIL.PCT.N:TREATMENT, data=exp1.C, na.action = "na.fail")
exp1.c <- exp1[!is.na(LRR.C),] # dredge can't seem to do this.
fit.c <- lm(LRR.C ~ MAP + MAT + SOLAR.INS + SOIL.PCT.N + TREATMENT + MAP:TREATMENT + MAT:TREATMENT + SOLAR.INS:TREATMENT + SOIL.PCT.N:TREATMENT, data=exp1.c, na.action = "na.fail")
all.c <- dredge(fit.c)
ma.c <- model.avg(all.c)
all.c
subset(all.c, delta <= 1.0)
?get.models
subset(all.c, delta <= 1.0)
summary(get.models(all.c, subset= delta <= 1.0)[[2]])
?dredge
dredge(fit.c, m.lim = c(0, 2))
?subset.dredge
names(exp1.c)
names(fit.c)
terms(fit.c)
x_terms <- terms(fit.c)[-1]
x_terms
x_terms <- terms(fit.c)[-1]
x_terms
terms(fit.c)$factors
names(terms(fit.c))
factors(fit.c)
terms(fit.c)
terms(fit.c)$term.labels
terms(fit.c)["term.labels"]
terms(fit.c)[["term.labels"]]
attr(terms(fit.c), "term.labels")
names(exp1)
y_cols <- c("LRR.C", "LRR.N", "LRR.P", "LRR.K" )
cov_cols <- c("MAP", "MAT", "SOLAR.INS", "SOIL.PCT.N")
y <- ycols[1]
y <- y_cols[1]
cov <- cov_cols[1]
?cov
covx <- cov_cols[1]
subdata <- exp1[!is.na(get(y)),] # dredge can't seem to do this.
fit <- lm(get(y) ~ get(covx)*Treatment, data=subdata, na.action="na.fail")
head(subdata)
get(y)
fit <- lm(get(y) ~ get(covx)*TREATMENT, data=subdata, na.action="na.fail")
summary(fit)
fit.all <- dredge(fit)
fit.all
?dredge
row.names(fit.all)
fit.all[ order(as.numeric(row.names(fit.all))),]
terms_i <- c("~ 1",
paste("~ ", covx, sep=""),
paste("~ ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE"," + ", covx, ":FENCE", sep="")
)
terms_i
y_cols <- c("LRR.C", "LRR.N", "LRR.P", "LRR.K" )
covx_cols <- c("MAP", "MAT", "SOLAR.INS", "SOIL.PCT.N")
res <- data.table(NULL)
for(y in y_cols){
subdata <- exp1[!is.na(get(y)),] # dredge can't seem to do this.
for(covx in covx_cols){
fit <- lm(get(y) ~ get(covx)*TREATMENT, data=subdata, na.action="na.fail")
fit.all <- dredge(fit)
fit.order <- fit.all[ order(as.numeric(row.names(fit.all))),]
terms_i <- c("~ 1",
paste("~ ", covx, sep=""),
paste("~ ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE"," + ", covx, ":FENCE", sep="")
)
res <- rbind(res, data.table(terms=terms_i, fit.order[,"AICc"]))
}
}
res
summary(fit)
y_cols <- c("LRR.C", "LRR.N", "LRR.P", "LRR.K" )
covx_cols <- c("MAP", "MAT", "SOLAR.INS", "SOIL.PCT.N")
for(y in y_cols){
res_part <- data.table(NULL)
subdata <- exp1[!is.na(get(y)),] # dredge can't seem to do this.
for(covx in covx_cols){
fit <- lm(get(y) ~ get(covx)*TREATMENT, data=subdata, na.action="na.fail")
fit.all <- dredge(fit)
fit.order <- fit.all[ order(as.numeric(row.names(fit.all))),]
terms_i <- c("~ 1",
paste("~ ", covx, sep=""),
paste("~ ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE"," + ", covx, ":FENCE", sep="")
)
res_part <- rbind(res_part, data.table(terms=terms_i, fit.order[,"AICc"]))
}
ifelse(y==ycols[1], res <- res_part, res <- merge(res, by=terms))
}
y_cols <- c("LRR.C", "LRR.N", "LRR.P", "LRR.K" )
covx_cols <- c("MAP", "MAT", "SOLAR.INS", "SOIL.PCT.N")
for(y in y_cols){
res_part <- data.table(NULL)
subdata <- exp1[!is.na(get(y)),] # dredge can't seem to do this.
for(covx in covx_cols){
fit <- lm(get(y) ~ get(covx)*TREATMENT, data=subdata, na.action="na.fail")
fit.all <- dredge(fit)
fit.order <- fit.all[ order(as.numeric(row.names(fit.all))),]
terms_i <- c("~ 1",
paste("~ ", covx, sep=""),
paste("~ ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE"," + ", covx, ":FENCE", sep="")
)
res_part <- rbind(res_part, data.table(terms=terms_i, fit.order[,"AICc"]))
}
ifelse(y==y_cols[1], res <- res_part, res <- merge(res, by=terms))
}
y
res
y_cols <- c("LRR.C", "LRR.N", "LRR.P", "LRR.K" )
covx_cols <- c("MAP", "MAT", "SOLAR.INS", "SOIL.PCT.N")
for(y in y_cols){
res_part <- data.table(NULL)
subdata <- exp1[!is.na(get(y)),] # dredge can't seem to do this.
for(covx in covx_cols){
fit <- lm(get(y) ~ get(covx)*TREATMENT, data=subdata, na.action="na.fail")
fit.all <- dredge(fit)
fit.order <- fit.all[ order(as.numeric(row.names(fit.all))),]
terms_i <- c("~ 1",
paste("~ ", covx, sep=""),
paste("~ ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE"," + ", covx, ":FENCE", sep="")
)
res_part <- rbind(res_part, data.table(terms=terms_i, AICc=fit.order[,"AICc"]))
}
setnames(res_part, "AICC", y)
ifelse(y==y_cols[1], res <- res_part, res <- merge(res, res_part, by=terms))
}
y_cols <- c("LRR.C", "LRR.N", "LRR.P", "LRR.K" )
covx_cols <- c("MAP", "MAT", "SOLAR.INS", "SOIL.PCT.N")
for(y in y_cols){
res_part <- data.table(NULL)
subdata <- exp1[!is.na(get(y)),] # dredge can't seem to do this.
for(covx in covx_cols){
fit <- lm(get(y) ~ get(covx)*TREATMENT, data=subdata, na.action="na.fail")
fit.all <- dredge(fit)
fit.order <- fit.all[ order(as.numeric(row.names(fit.all))),]
terms_i <- c("~ 1",
paste("~ ", covx, sep=""),
paste("~ ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE"," + ", covx, ":FENCE", sep="")
)
res_part <- rbind(res_part, data.table(terms=terms_i, AICc=fit.order[,"AICc"]))
}
setnames(res_part, "AICc", y)
ifelse(y==y_cols[1], res <- res_part, res <- merge(res, res_part, by=terms))
}
res
res_part
?merge
ifelse(y==y_cols[1], res <- res_part, res <- merge(res, res_part, by="terms"))
y_cols <- c("LRR.C", "LRR.N", "LRR.P", "LRR.K" )
covx_cols <- c("MAP", "MAT", "SOLAR.INS", "SOIL.PCT.N")
for(y in y_cols){
res_part <- data.table(NULL)
subdata <- exp1[!is.na(get(y)),] # dredge can't seem to do this.
for(covx in covx_cols){
fit <- lm(get(y) ~ get(covx)*TREATMENT, data=subdata, na.action="na.fail")
fit.all <- dredge(fit)
fit.order <- fit.all[ order(as.numeric(row.names(fit.all))),]
terms_i <- c("~ 1",
paste("~ ", covx, sep=""),
paste("~ ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE"," + ", covx, ":FENCE", sep="")
)
res_part <- rbind(res_part, data.table(terms=terms_i, AICc=fit.order[,"AICc"]))
}
res_part <- res_part[, .(AICc=mean(AICc)), by=terms]
setnames(res_part, "AICc", y)
ifelse(y==y_cols[1], res <- res_part, res <- merge(res, res_part, by="terms"))
}
res
apply(AICc[, .SD, .SDcols=y_cols], 2, min)
AICc[, .SD, .SDcols=y_cols]
is.data.table
dAICc <- res[, .SD, .SDcols=y_cols] - apply(res[, .SD, .SDcols=y_cols], 2, min)
dAICc
apply(res[, .SD, .SDcols=y_cols], 2, min)
dAICc <- t(t(res[, .SD, .SDcols=y_cols]) - apply(res[, .SD, .SDcols=y_cols], 2, min))
dAICc
dAICc <- data.table(Terms = res[,terms], t(t(res[, .SD, .SDcols=y_cols]) - apply(res[, .SD, .SDcols=y_cols], 2, min)))
dAICc
dAICc <- data.table(Terms = res[,terms], round(t(t(res[, .SD, .SDcols=y_cols]) - apply(res[, .SD, .SDcols=y_cols], 2, min)), 1))
y_cols <- c("LRR.C", "LRR.N", "LRR.P", "LRR.K" )
covx_cols <- c("MAP", "MAT", "SOLAR.INS", "SOIL.PCT.N")
for(y in y_cols){
res_part <- data.table(NULL)
subdata <- exp1[!is.na(get(y)),] # dredge can't seem to do this.
for(covx in covx_cols){
fit <- lm(get(y) ~ get(covx)*TREATMENT, data=subdata, na.action="na.fail")
fit.all <- dredge(fit)
fit.order <- fit.all[ order(as.numeric(row.names(fit.all))),]
terms_i <- c("~ 1",
paste("~ ", covx, sep=""),
paste("~ ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE"," + ", covx, ":FENCE", sep="")
)
res_part <- rbind(res_part, data.table(terms=terms_i, AICc=fit.order[,"AICc"]))
}
res_part <- res_part[, .(AICc=mean(AICc)), by=terms]
setnames(res_part, "AICc", y)
ifelse(y==y_cols[1], res <- res_part, res <- merge(res, res_part, by="terms"))
}
dAICc <- data.table(Terms = res[,terms], round(t(t(res[, .SD, .SDcols=y_cols]) - apply(res[, .SD, .SDcols=y_cols], 2, min)), 1))
dAICc
y_cols <- c("LRR.C", "LRR.N", "LRR.P", "LRR.K" )
covx_cols <- c("MAP", "MAT", "SOLAR.INS", "SOIL.PCT.N")
for(y in y_cols){
res_part <- data.table(NULL)
subdata <- exp1[!is.na(get(y)),] # dredge can't seem to do this.
for(covx in covx_cols){
fit <- lm(get(y) ~ get(covx)*TREATMENT, data=subdata, na.action="na.fail")
fit.all <- dredge(fit)
fit.order <- fit.all[ order(as.numeric(row.names(fit.all))),]
terms_i <- c("~ 1",
paste("~ ", covx, sep=""),
paste("~ ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE"," + ", covx, ":FENCE", sep="")
)
res_part <- rbind(res_part, data.table(terms=terms_i, AICc=fit.order[,"AICc"]))
}
res_part <- res_part[, .(AICc=mean(AICc)), by=terms]
setnames(res_part, "AICc", y)
ifelse(y==y_cols[1], res <- res_part, res <- merge(res, res_part, by="terms"))
}
dAICc <- data.table(Terms = res[,terms], round(t(t(res[, .SD, .SDcols=y_cols]) - apply(res[, .SD, .SDcols=y_cols], 2, min)), 1))
dAICc
y_cols <- c("LRR.N", "LRR.C", "LRR.P", "LRR.K" )
covx_cols <- c("MAP", "MAT", "SOLAR.INS", "SOIL.PCT.N")
for(y in y_cols){
res_part <- data.table(NULL)
subdata <- exp1[!is.na(get(y)),] # dredge can't seem to do this.
for(covx in covx_cols){
fit <- lm(get(y) ~ get(covx)*TREATMENT, data=subdata, na.action="na.fail")
fit.all <- dredge(fit)
fit.order <- fit.all[ order(as.numeric(row.names(fit.all))),]
terms_i <- c("~ 1",
paste("~ ", covx, sep=""),
paste("~ ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE"," + ", covx, ":FENCE", sep="")
)
res_part <- rbind(res_part, data.table(terms=terms_i, AICc=fit.order[,"AICc"]))
}
res_part <- res_part[, .(AICc=mean(AICc)), by=terms]
setnames(res_part, "AICc", y)
ifelse(y==y_cols[1], res <- res_part, res <- merge(res, res_part, by="terms"))
}
dAICc <- data.table(Terms = res[,terms], round(t(t(res[, .SD, .SDcols=y_cols]) - apply(res[, .SD, .SDcols=y_cols], 2, min)), 1))
dAICc
y_cols <- c("LRR.C", "LRR.N", "LRR.P", "LRR.K" )
covx_cols <- c("MAP", "MAT", "SOLAR.INS", "SOIL.PCT.N")
for(y in y_cols){
res_part <- data.table(NULL)
subdata <- exp1[!is.na(get(y)),] # dredge can't seem to do this.
for(covx in covx_cols){
fit <- lm(get(y) ~ get(covx)*TREATMENT, data=subdata, na.action="na.fail")
fit.all <- dredge(fit)
fit.order <- fit.all[ order(as.numeric(row.names(fit.all))),]
terms_i <- c("~ 1",
paste("~ ", covx, sep=""),
paste("~ ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE", sep=""),
paste("~ ", covx," + ", "FENCE"," + ", covx, ":FENCE", sep="")
)
res_part <- rbind(res_part, data.table(terms=terms_i, AICc=fit.order[,"AICc"]))
}
res_part <- res_part[, .(AICc=mean(AICc)), by=terms]
setnames(res_part, "AICc", y)
ifelse(y==y_cols[1], res <- res_part, res <- merge(res, res_part, by="terms"))
}
dAICc <- data.table(Terms = res[,terms], round(t(t(res[, .SD, .SDcols=y_cols]) - apply(res[, .SD, .SDcols=y_cols], 2, min)), 1))
dAICc
names(exp1)
m1 <- lm(LRR.C ~ MAP*TREATMENT, data=exp1)
m2 <- lm(LRR.C ~ 1, data=exp1)
AICc(m1)
m1 <- lm(LRR.C ~ MAP*TREATMENT, data=exp1)
m2 <- lm(LRR.C ~ 1, data=exp1)
AICc(m1)
AICc(m2)
AICc(m2)-AICc(m1)
mod1.dat <- exp1
# CARBON
C.mod1 <- lm(mod1.dat$LRR.C ~ 1, data=mod1.dat)
C.mod11 <- lm(mod1.dat$LRR.C ~ mod1.dat$MAP * mod1.dat$TREATMENT, data=mod1.dat)
AICc(C.mod1) - AICc(C.mod11)
C.mod1 <- lm(mod1.dat$LRR.C ~ 1, data=mod1.dat)
C.mod2 <- lm(mod1.dat$LRR.C ~ mod1.dat$TREATMENT, data=mod1.dat)
C.mod3 <- lm(mod1.dat$LRR.C ~ mod1.dat$MAP, data=mod1.dat)
C.mod4 <- lm(mod1.dat$LRR.C ~ mod1.dat$MAT, data=mod1.dat)
C.mod5 <- lm(mod1.dat$LRR.C ~ mod1.dat$SOLAR.INS, data=mod1.dat)
C.mod6 <- lm(mod1.dat$LRR.C ~ mod1.dat$SOIL.PCT.N, data=mod1.dat)
C.mod7 <- lm(mod1.dat$LRR.C ~ mod1.dat$MAP + mod1.dat$TREATMENT, data=mod1.dat)
C.mod8 <- lm(mod1.dat$LRR.C ~ mod1.dat$MAT + mod1.dat$TREATMENT, data=mod1.dat)
C.mod9 <- lm(mod1.dat$LRR.C ~ mod1.dat$SOLAR.INS + mod1.dat$TREATMENT, data=mod1.dat)
C.mod10 <- lm(mod1.dat$LRR.C ~ mod1.dat$SOIL.PCT.N + mod1.dat$TREATMENT, data=mod1.dat)
C.mod11 <- lm(mod1.dat$LRR.C ~ mod1.dat$MAP * mod1.dat$TREATMENT, data=mod1.dat)
C.mod12 <- lm(mod1.dat$LRR.C ~ mod1.dat$MAT * mod1.dat$TREATMENT, data=mod1.dat)
C.mod13 <- lm(mod1.dat$LRR.C ~ mod1.dat$SOLAR.INS * mod1.dat$TREATMENT, data=mod1.dat)
C.mod14 <- lm(mod1.dat$LRR.C ~ mod1.dat$SOIL.PCT.N * mod1.dat$TREATMENT, data=mod1.dat)
# select best model by AICc model selection
AICctab(C.mod1, C.mod2, C.mod3, C.mod4, C.mod5, C.mod6, C.mod7, C.mod8, C.mod9, C.mod10,
C.mod11, C.mod12, C.mod13, C.mod14, sort=TRUE)
# load libraries
library(bbmle)
install.packages("bbmle")
library(bbmle)
library(car)
AICctab(C.mod1, C.mod2, C.mod3, C.mod4, C.mod5, C.mod6, C.mod7, C.mod8, C.mod9, C.mod10,
C.mod11, C.mod12, C.mod13, C.mod14, sort=TRUE)
?AICctab
blogdown:::serve_site()
fn <- "tableS3.png"
if(knitr_path==TRUE){
image_path <- paste("../images", folder, fn, sep="/")
}else{
image_path <- paste("/images", folder, fn, sep="/")
}
knitr::include_graphics(image_path)
knir::kable(dAICc)
knitr::kable(dAICc)
1.33*192
1.33*192
28*48
data_folder <- "../data"
folder <- "Data from Response of bluebunch wheatgrass to invasion- differences in competitive ability among invader-experienced and naïve populations"
# images need to be moved to /static/images/data from.../image.png
knitr_path <- FALSE # run = TRUE to debug
source("../R/clean_label.R") # bookdown
knitr_path <- TRUE
fn <- "Gibson_invasion_response_data.xlsx"
file_path <- paste(data_folder, folder, fn, sep="/")
# offspring weight
sheet_i <- "Germination"
exp1 <- data.table(read_excel(file_path, sheet=sheet_i))
library(ggplot2)
library(readxl)
library(data.table)
library(emmeans)
library(nlme)
library(car)
fn <- "Gibson_invasion_response_data.xlsx"
file_path <- paste(data_folder, folder, fn, sep="/")
# offspring weight
sheet_i <- "Germination"
exp1 <- data.table(read_excel(file_path, sheet=sheet_i))
colnames(exp1) <- clean_label(colnames(exp1))
setnames(exp1, "Type", "Experience")
# offspring weight
sheet_i <- "Traits"
exp2 <- data.table(read_excel(file_path, sheet=sheet_i, na="x"))
colnames(exp2) <- clean_label(colnames(exp2))
exp2[, Treatment:=factor(Treatment)]
exp2[, Experience:=factor(Population_Type)]
exp2[, Stage:=ifelse(as.character(Date)=="2012-04-30","Seedling", "Juvenile")]
exp2[, Exp_Pop:=factor(paste(Experience,Population,sep="."))]
con3 <- list(Treatment=contr.sum, Experience=contr.sum) # change the contrasts coding for the model matrix
# fit.full <- lm(Week_1 ~ Treatment*Experience, data=exp1, contrasts=con3)
# Anova(fit.full, type="3")
# 26 residual df suggests either this was one-way anova with something removed or an additive model
fit.add <- lm(Week_1 ~ Treatment + Experience, data=exp1, contrasts=con3)
Anova(fit.add, type="3") # replicates
# fit.one <- lm(Week_1 ~ Experience, data=exp1[Population!="Ana"])
# anova(fit.one) # obviously cannot be it given Ana is in the posthoc
fit.emm <- emmeans(fit.add, specs=c("Treatment", "Experience"))
contrast(fit.emm, method="revpairwise")
fit.emm1 <- emmeans(fit.add, specs=c("Treatment"))
fit.emm2 <- emmeans(fit.add, specs=c("Experience"))
contrast(fit.emm1, method="revpairwise")
contrast(fit.emm2, method="revpairwise")
fit.emm <- emmeans(fit.add, specs=c("Experience"))
# Tukey HSD
contrast(fit.emm, method="revpairwise")
# no adjustment
contrast(fit.emm, method="revpairwise", adjust="none")
fit.emm <- emmeans(fit.add, specs=c("Experience"))
# Tukey HSD
contrast(fit.emm, method="revpairwise")
# no adjustment
# contrast(fit.emm, method="revpairwise", adjust="none")
xcols <- c("Treatment", "Experience", "Stage", "Population", "Exp_Pop")
ycols <- c("Longest_leaf", "n_Leaves", "Biomass", "Shoot_biomass", "Root_biomass", "Root.shoot_ratio")
subdata <- na.omit(exp2.b[Population!="Ana" &
Stage=="Seedling" &
N > 4, .SD, .SDcols=c(xcols, ycols[2])])
counts <- exp2[!is.na(n_Leaves) & Population!="Ana", .(N=.N), by=.(Treatment, Experience, Population, Stage, Exp_Pop)]
counts[, .(N=.N), by=.(Stage, Population)]
exp2.b <- merge(exp2, counts, by=c("Treatment", "Experience", "Population", "Stage", "Exp_Pop"))
which(counts[, N] < 3)
counts <- exp2[!is.na(n_Leaves) & Population!="Ana", .(N=.N), by=.(Treatment, Experience, Population, Stage, Exp_Pop)]
# counts[, .(N=.N), by=.(Stage, Population)]
exp2.b <- merge(exp2, counts, by=c("Treatment", "Experience", "Population", "Stage", "Exp_Pop"))
# which(counts[, N] < 3)
xcols <- c("Treatment", "Experience", "Stage", "Population", "Exp_Pop")
ycols <- c("Longest_leaf", "n_Leaves", "Biomass", "Shoot_biomass", "Root_biomass", "Root.shoot_ratio")
subdata <- na.omit(exp2.b[Population!="Ana" &
Stage=="Seedling" &
N > 4, .SD, .SDcols=c(xcols, ycols[2])])
subdata[, Experience:=factor(Experience)]
dim(subdata)
fit <- lmer(n_Leaves ~ Treatment*Experience + Population + (1|Population), data=subdata, REML = FALSE)
anova(fit, type="3")
library(lmerTest)
fit <- lmer(n_Leaves ~ Treatment*Experience + Population + (1|Population) + (1|Population:Experience), data=subdata, REML = FALSE)
anova(fit, type="3")
fit <- lmer(n_Leaves ~ Treatment*Experience + Population + (1|Population) + (1|Population:Experience), data=subdata, REML = TRUE)
anova(fit, type="3")
fit <- lme(n_Leaves ~ Treatment*Experience + Population, random= ~ 1|Population, data=subdata)
install.packages("blogdown")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::install_hugo()
blogdown:::serve_site()
library(ggplot2)
library(readxl)
library(data.table)
library(emmeans)
library(nlme)
library(lmerTest)
library(car)
data_folder <- "../data"
folder <- "Data from Response of bluebunch wheatgrass to invasion- differences in competitive ability among invader-experienced and naïve populations"
# images need to be moved to /static/images/data from.../image.png
knitr_path <- FALSE # run = TRUE to debug
source("../R/clean_label.R") # bookdown
knitr_path <- TRUE
fn <- "Gibson_invasion_response_data.xlsx"
file_path <- paste(data_folder, folder, fn, sep="/")
sheet_i <- "Germination"
exp1 <- data.table(read_excel(file_path, sheet=sheet_i))
colnames(exp1) <- clean_label(colnames(exp1))
setnames(exp1, "Type", "Experience")
sheet_i <- "Traits"
exp2 <- data.table(read_excel(file_path, sheet=sheet_i, na="x"))
colnames(exp2) <- clean_label(colnames(exp2))
exp2[, Treatment:=factor(Treatment)]
exp2[, Experience:=factor(Population_Type)]
exp2[, Stage:=ifelse(as.character(Date)=="2012-04-30","Seedling", "Juvenile")]
exp2[, Exp_Pop:=factor(paste(Experience,Population,sep="."))]
counts <- exp2[!is.na(n_Leaves) & Population!="Ana", .(N=.N), by=.(Treatment, Experience, Population, Stage, Exp_Pop)]
# counts[, .(N=.N), by=.(Stage, Population)]
exp2.b <- merge(exp2, counts, by=c("Treatment", "Experience", "Population", "Stage", "Exp_Pop"))
# which(counts[, N] < 3)
xcols <- c("Treatment", "Experience", "Stage", "Population", "Exp_Pop")
ycols <- c("Longest_leaf", "n_Leaves", "Biomass", "Shoot_biomass", "Root_biomass", "Root.shoot_ratio")
subdata <- na.omit(exp2.b[Population!="Ana" &
Stage=="Seedling" &
N > 1, .SD, .SDcols=c(xcols, ycols[2])])
# check for populations that are missing from Treatment cell and exclude
dt <- subdata[, .(N=.N), by=.(Treatment, Experience, Population)]
orderBy(~Experience + Population + Treatment, data=dt)
library(doBy)
xcols <- c("Treatment", "Experience", "Stage", "Population", "Exp_Pop")
ycols <- c("Longest_leaf", "n_Leaves", "Biomass", "Shoot_biomass", "Root_biomass", "Root.shoot_ratio")
subdata <- na.omit(exp2.b[Population!="Ana" &
Stage=="Seedling" &
N > 1, .SD, .SDcols=c(xcols, ycols[2])])
# check for populations that are missing from Treatment cell and exclude
dt <- subdata[, .(N=.N), by=.(Treatment, Experience, Population)]
orderBy(~Experience + Population + Treatment, data=dt)
dt <- dt[, .(N=.N), by=Population]
inc <- dt[which(dt[, N]>1), Population]
subdata <- subdata[Population %in% inc, ]
subdata[, Experience:=factor(Experience)]
subdata[, Population:=factor(Population)]
dim(subdata)
con3 <- list(Treatment=contr.sum, Experience=contr.sum, Population=contr.sum) # change the contrasts coding for the model matrix
fit.aov <- aov(n_Leaves ~ Experience/Population + Treatment*Experience, contrasts=con3, data=subdata)
anova(fit.aov) # the interaction matches jmp
Anova(fit.aov,type="3") # fails
con3 <- list(Treatment=contr.sum, Experience=contr.sum, Population=contr.sum) # change the contrasts coding for the model matrix
fit.aov <- aov(n_Leaves ~ Population/Experience + Treatment*Experience, contrasts=con3, data=subdata)
anova(fit.aov) # the interaction matches jmp
Anova(fit.aov,type="3") # fails
con3 <- list(Treatment=contr.sum, Experience=contr.sum, Population=contr.sum) # change the contrasts coding for the model matrix
fit.aov <- aov(n_Leaves ~ Experience/Population + Treatment*Experience, contrasts=con3, data=subdata)
anova(fit.aov) # the interaction matches jmp
Anova(fit.aov,type="3") # fails
blogdown:::serve_site()
