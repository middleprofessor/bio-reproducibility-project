# my interpretation: when Te is high (and db is high), db is lower (than what?)
# "Accuracy in thermoregulation (db) is defined as the deviation of field active body temperatures (Tb) from the preferred temperature (Tset)." -- db is only positive so must be the absolute deviation.
# "The thermal quality of the habitat (de) is defined as the deviations of operative temperatures (Te) from the preferred temperature range (Tset). Thermal quality (de) is typically regarded as high for values less than 3 and low for values greater than 5" -- again its the absolute deviation
con3 <- list(Hot.cold_te=contr.sum) # change the contrasts coding for the model matrix
Anova(lm(db ~ de*Hot.cold_te, data=exp1, contrasts=con3), type="3")
#>Although when unfavorably high temperatures (i.e., high db due to high Te) were experienced, the degree of thermoregulatory precision was significantly greater relative to thermal quality of habitat (ANCOVA: F1, 63 = 14.10; P = 0.0004).
# my interpretation: when Te is high (and db is high), db is lower (than what?)
exp1
# "Accuracy in thermoregulation (db) is defined as the deviation of field active body temperatures (Tb) from the preferred temperature (Tset)." -- db is only positive so must be the absolute deviation.
# "The thermal quality of the habitat (de) is defined as the deviations of operative temperatures (Te) from the preferred temperature range (Tset). Thermal quality (de) is typically regarded as high for values less than 3 and low for values greater than 5" -- again its the absolute deviation
con3 <- list(Hot.cold_te=contr.sum) # change the contrasts coding for the model matrix
Anova(lm(db ~ de*Hot.cold_te, data=exp1, contrasts=con3), type="3")
Anova(lm(db ~ Te_30*Hot.cold_te, data=exp1, contrasts=con3), type="3")
Anova(lm(db ~ Te_30 + de*Hot.cold_te, data=exp1, contrasts=con3), type="3")
#>Although when unfavorably high temperatures (i.e., high db due to high Te) were experienced, the degree of thermoregulatory precision was significantly greater relative to thermal quality of habitat (ANCOVA: F1, 63 = 14.10; P = 0.0004).
# my interpretation: when Te is high (and db is high), db is lower (than what?)
# "Accuracy in thermoregulation (db) is defined as the deviation of field active body temperatures (Tb) from the preferred temperature (Tset)." -- db is only positive so must be the absolute deviation.
# "The thermal quality of the habitat (de) is defined as the deviations of operative temperatures (Te) from the preferred temperature range (Tset). Thermal quality (de) is typically regarded as high for values less than 3 and low for values greater than 5" -- again its the absolute deviation
con3 <- list(Hot.cold_te=contr.sum) # change the contrasts coding for the model matrix
Anova(lm(db ~ de*Hot.cold_te, data=exp1, contrasts=con3), type="3")
Anova(lm(db ~ Te_30 + de*Hot.cold_te, data=exp1, contrasts=con3), type="3")
Anova(lm(db ~ Tb + de*Hot.cold_te, data=exp1, contrasts=con3), type="3")
#>Although when unfavorably high temperatures (i.e., high db due to high Te) were experienced, the degree of thermoregulatory precision was significantly greater relative to thermal quality of habitat (ANCOVA: F1, 63 = 14.10; P = 0.0004).
# my interpretation: when Te is high (and db is high), db is lower (than what?)
exp1[dtime>14,]
# is "time_of_day" column the early/middle split?
qplot(x=time_of_day, y=dtime, data=exp1[time_of_day!="" & !is.na(de) & !is.na(db), ])
# if it is then the mapping from time to time_of_day is wrong
# re-map time to a new time_of_day column based on what the author's write
exp1[, my_time_of_day:=factor(ifelse(dtime >= 8.0 & dtime <= 10.0, "E",
ifelse(dtime >= 11.0 & dtime <= 13.0, "M", NA)))]
# analysis based on author's mapping to time_of_day
exp1[!is.na(habitat_type) & !is.na(time_of_day) & !is.na(de),
.(N=.N,
median_de=median(de, na.rm=TRUE),
mean_de=mean(de, na.rm=TRUE),
SE=sd(de)/sqrt(.N)),
by=.(habitat_type, time_of_day)]
kruskal.test(de ~ time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
# analysis based on my mapping to time_of_day
exp1[!is.na(habitat_type) & !is.na(my_time_of_day),
.(median_de=median(de, na.rm=TRUE),
mean_de=mean(de, na.rm=TRUE)),
by=.(habitat_type, my_time_of_day)]
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
anova(de ~ habitat_type, data=exp1)
anova(lm(de ~ habitat_type, data=exp1))
wilcox.test(de ~ habitat_type, data=exp1)
kruskal.test(de ~ habitat_type, data=exp1, na.action="na.omit")
exp1[, .(mean_E=mean(E)), by=.(habitat_type)]
fit <- lm(E ~ habitat_type, data=exp1)
anova(fit)
exp1[!is.na(E), .(mean_E=mean(E)), by=.(habitat_type)]
fit <- lm(E ~ habitat_type, data=exp1)
anova(fit)
exp1[!is.na(E), .(mean_E=mean(E),
N=.N,
SE=sd(E)/sqrt(.N)),
by=.(habitat_type)]
fit <- lm(E ~ habitat_type, data=exp1)
anova(fit)
fit <- lm(E ~ habitat_type, data=exp1)
anova(fit)
exp1[!is.na(E), .(mean_E=mean(E),
N=.N,
SE=sd(E)/sqrt(.N)),
by=.(habitat_type)]
qplot(x=habitat_type, y=E)
exp1[!is.na(E), .(mean_E=mean(E),
N=.N,
SE=sd(E)/sqrt(.N)),
by=.(habitat_type)]
qplot(x=habitat_type, y=E, data=exp1)
exp1$E
exp1[, my.E:=(1-db/de)]
exp1[!is.na(E), .(mean_E=mean(E),
N=.N,
SE=sd(E)/sqrt(.N)),
by=.(habitat_type)]
qplot(x=habitat_type, y=E, data=exp1[!is.na(habitat_type)])
exp1[, my.E:=(1-db/de)]
qplot(x=habitat_type, y=my.E, data=exp1[!is.na(habitat_type)])
exp1[!is.na(E), .(mean_E=mean(E),
N=.N,
SE=sd(E)/sqrt(.N)),
by=.(habitat_type)]
qplot(x=habitat_type, y=E, data=exp1[!is.na(habitat_type)])
exp1[, my.E:=(1-de/db)]
qplot(x=habitat_type, y=my.E, data=exp1[!is.na(habitat_type)])
exp1$de
!is.na(exp1$db)
exp1[!is.na(db), .SD, .SDcols=c(db, de, E)]
names(exp1)
exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E")]
exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E", "my.E")]
exp1[!is.na(E), .(mean_E=mean(E),
N=.N,
SE=sd(E)/sqrt(.N)),
by=.(habitat_type)]
qplot(x=habitat_type, y=E, data=exp1[!is.na(habitat_type)])
exp1[, my.E:=(1-db/de)]
qplot(x=habitat_type, y=my.E, data=exp1[!is.na(habitat_type)])
exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E", "my.E")]
exp1[!is.na(E), .(mean_E=mean(E),
N=.N,
SE=sd(E)/sqrt(.N)),
by=.(habitat_type)]
exp1[!is.na(E) & E<1, .(mean_E=mean(E),
N=.N,
SE=sd(E)/sqrt(.N)),
by=.(habitat_type)]
exp1[!is.na(E) & E<=1, .(mean_E=mean(E),
N=.N,
SE=sd(E)/sqrt(.N)),
by=.(habitat_type)]
fit <- lm(E ~ habitat_type, data=exp1[E<=1,])
anova(fit)
wilcox.test(E ~ habitat_type, data=exp1)
kruskal.test(E ~ habitat_type, data=exp1)
exp1[, my.E:=ifelse(E > 1, 1, E)]
wilcox.test(my.E ~ habitat_type, data=exp1)
exp1[, my.E:=ifelse(E > 1, 1, E)]
wilcox.test(my.E ~ habitat_type, data=exp1)
kruskal.test(my.E ~ habitat_type, data=exp1)
exp1[, my.E:=ifelse(E > 1, 1, E)]
wilcox.test(my.E ~ habitat_type, data=exp1)
kruskal.test(my.E ~ habitat_type, data=exp1)
coef(summary(lm(my.E ~ habitat_type, data=exp1)))
exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E", "my.E")]
exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E", "my.E")]
exp1[, my.E:=ifelse(db>=de, 0, E)]
wilcox.test(my.E ~ habitat_type, data=exp1)
kruskal.test(my.E ~ habitat_type, data=exp1)
coef(summary(lm(my.E ~ habitat_type, data=exp1)))
qplot(x=de, y=my.E)
exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E", "my.E")]
exp1[, my.E:=ifelse(db>=de, 0, E)]
wilcox.test(my.E ~ habitat_type, data=exp1)
kruskal.test(my.E ~ habitat_type, data=exp1)
coef(summary(lm(my.E ~ habitat_type, data=exp1)))
qplot(x=de, y=my.E, data=exp1)
exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E", "my.E")]
exp1[, my.E:=ifelse(db>=de, 0, E)]
wilcox.test(my.E ~ habitat_type, data=exp1)
kruskal.test(my.E ~ habitat_type, data=exp1)
coef(summary(lm(my.E ~ habitat_type, data=exp1)))
qplot(x=de, y=my.E, data=exp1, color=habitat_type)
exp1[!is.na(db) & my.E==0, .SD, .SDcols=c("db", "de", "E", "my.E")]
which(exp1$db=4.105000)
which(exp1$db==4.105000)
exp1[68, de]
exp1[68, db]
1 - (4.105/2.095)
#exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E", "my.E")]
exp1[, my.E:=ifelse(db>=de, 0, E)]
exp1[!is.na(db) & my.E==0, .SD, .SDcols=c("db", "de", "E", "my.E")]
wilcox.test(my.E ~ habitat_type, data=exp1[E != 0,] )
kruskal.test(my.E ~ habitat_type, data=exp1[E != 0,])
coef(summary(lm(my.E ~ habitat_type, data=exp1[E != 0,])))
qplot(x=de, y=my.E, data=exp1, color=habitat_type)
#exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E", "my.E")]
exp1[, my.E:=ifelse(db>=de, 0, E)]
#exp1[!is.na(db) & my.E==0, .SD, .SDcols=c("db", "de", "E", "my.E")]
wilcox.test(my.E ~ habitat_type, data=exp1[E != 0,] )
kruskal.test(my.E ~ habitat_type, data=exp1[E != 0,])
coef(summary(lm(my.E ~ habitat_type, data=exp1[E != 0,])))
qplot(x=de, y=my.E, data=exp1, color=habitat_type)
#exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E", "my.E")]
exp1[, my.E:=ifelse(db>=de, 0, E)]
#exp1[!is.na(db) & my.E==0, .SD, .SDcols=c("db", "de", "E", "my.E")]
wilcox.test(my.E ~ habitat_type, data=exp1[E != 0,] )
kruskal.test(my.E ~ habitat_type, data=exp1[E != 0,])
qplot(x=de, y=my.E, data=exp1, color=habitat_type)
coef(summary(lm(my.E ~ de + habitat_type, data=exp1[E != 0,])))
#exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E", "my.E")]
exp1[, my.E:=ifelse(db>=de, 0, E)]
#exp1[!is.na(db) & my.E==0, .SD, .SDcols=c("db", "de", "E", "my.E")]
wilcox.test(my.E ~ habitat_type, data=exp1[E != 0,] )
kruskal.test(my.E ~ habitat_type, data=exp1[E != 0,])
gg <- ggplot(data=exp1, aes(x=de, y=my.E, color=habitat_type)) +
geom_smooth(data=exp1[E != 0,], aes(x=de, y=my.E, color=habitat_type))
gg
coef(summary(lm(my.E ~ de + habitat_type, data=exp1[E != 0,])))
#exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E", "my.E")]
exp1[, my.E:=ifelse(db>=de, 0, E)]
#exp1[!is.na(db) & my.E==0, .SD, .SDcols=c("db", "de", "E", "my.E")]
wilcox.test(my.E ~ habitat_type, data=exp1[E != 0,] )
kruskal.test(my.E ~ habitat_type, data=exp1[E != 0,])
gg <- ggplot(data=exp1, aes(x=de, y=my.E, color=habitat_type)) +
geom_smooth(data=exp1[E != 0,], aes(x=de, y=my.E, color=habitat_type), method="lm")
gg
coef(summary(lm(my.E ~ de + habitat_type, data=exp1[E != 0,])))
#exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E", "my.E")]
exp1[, my.E:=ifelse(db>=de, 0, E)]
#exp1[!is.na(db) & my.E==0, .SD, .SDcols=c("db", "de", "E", "my.E")]
gg <- ggplot(data=exp1, aes(x=de, y=my.E, color=habitat_type)) +
geom_point() +
geom_smooth(data=exp1[E != 0,], aes(x=de, y=my.E, color=habitat_type), method="lm")
gg
# not conditioned on de
wilcox.test(my.E ~ habitat_type, data=exp1[E != 0,] )
kruskal.test(my.E ~ habitat_type, data=exp1[E != 0,])
coef(summary(lm(my.E ~ habitat_type, data=exp1[E != 0,])))
coef(summary(lm(my.E ~ de + habitat_type, data=exp1[E != 0,])))
#exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E", "my.E")]
exp1[, my.E:=ifelse(db>=de, 0, E)]
#exp1[!is.na(db) & my.E==0, .SD, .SDcols=c("db", "de", "E", "my.E")]
gg <- ggplot(data=exp1, aes(x=de, y=my.E, color=habitat_type)) +
geom_point() +
geom_smooth(data=exp1[my.E!=0], aes(x=de, y=my.E, color=habitat_type), method="lm")
gg
# not conditioned on de
wilcox.test(my.E ~ habitat_type, data=exp1[my.E != 0,] )
kruskal.test(my.E ~ habitat_type, data=exp1[my.E != 0,])
coef(summary(lm(my.E ~ habitat_type, data=exp1[my.E != 0,])))
coef(summary(lm(my.E ~ de + habitat_type, data=exp1[my.E != 0,])))
#exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E", "my.E")]
exp1[, my.E:=ifelse(db>=de, 0, E)]
#exp1[!is.na(db) & my.E==0, .SD, .SDcols=c("db", "de", "E", "my.E")]
gg <- ggplot(data=exp1, aes(x=de, y=my.E, color=habitat_type)) +
geom_point() +
geom_smooth(data=exp1[my.E!=0 & !is.na(habitat_type)], aes(x=de, y=my.E, color=habitat_type), method="lm")
gg
# not conditioned on de
wilcox.test(my.E ~ habitat_type, data=exp1[my.E != 0,] )
kruskal.test(my.E ~ habitat_type, data=exp1[my.E != 0,])
coef(summary(lm(my.E ~ habitat_type, data=exp1[my.E != 0,])))
coef(summary(lm(my.E ~ de + habitat_type, data=exp1[my.E != 0,])))
#exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E", "my.E")]
exp1[, my.E:=ifelse(db>=de, 0, E)]
#exp1[!is.na(db) & my.E==0, .SD, .SDcols=c("db", "de", "E", "my.E")]
gg <- ggplot(data=exp1[!is.na(habitat_type)], aes(x=de, y=my.E, color=habitat_type)) +
geom_point() +
geom_smooth(data=exp1[my.E!=0 & !is.na(habitat_type)], aes(x=de, y=my.E, color=habitat_type), method="lm")
gg
# not conditioned on de
wilcox.test(my.E ~ habitat_type, data=exp1[my.E != 0,] )
kruskal.test(my.E ~ habitat_type, data=exp1[my.E != 0,])
coef(summary(lm(my.E ~ habitat_type, data=exp1[my.E != 0,])))
coef(summary(lm(my.E ~ de + habitat_type, data=exp1[my.E != 0,])))
#exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E", "my.E")]
exp1[, my.E:=ifelse(db>=de, 0, E)]
#exp1[!is.na(db) & my.E==0, .SD, .SDcols=c("db", "de", "E", "my.E")]
gg <- ggplot(data=exp1[!is.na(habitat_type)], aes(x=de, y=my.E, color=habitat_type)) +
geom_point() +
geom_smooth(data=exp1[my.E!=0 & !is.na(habitat_type)], aes(x=de, y=my.E, color=habitat_type), method="lm")
gg
# not conditioned on de
wilcox.test(my.E ~ habitat_type, data=exp1[my.E != 0,] )
kruskal.test(my.E ~ habitat_type, data=exp1[my.E != 0,])
coef(summary(lm(my.E ~ habitat_type, data=exp1[my.E != 0,])))
# conditioned on de
coef(summary(lm(my.E ~ de + habitat_type, data=exp1[my.E != 0,])))
#exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E", "my.E")]
exp1[, my.E:=ifelse(db>=de, 0, E)]
#exp1[!is.na(db) & my.E==0, .SD, .SDcols=c("db", "de", "E", "my.E")]
gg <- ggplot(data=exp1[!is.na(habitat_type)], aes(x=de, y=my.E, color=habitat_type)) +
geom_point() +
geom_smooth(data=exp1[my.E!=0 & !is.na(habitat_type)], aes(x=de, y=my.E, color=habitat_type), method="lm")
gg
# not conditioned on de
wilcox.test(my.E ~ habitat_type, data=exp1[my.E != 0,] )
kruskal.test(my.E ~ habitat_type, data=exp1[my.E != 0,])
coef(summary(lm(my.E ~ habitat_type, data=exp1[my.E != 0,])))
# conditioned on de
coef(summary(lm(my.E ~ de + habitat_type, data=exp1[my.E != 0,])))
#exp1[!is.na(db), .SD, .SDcols=c("db", "de", "E", "my.E")]
exp1[, my.E:=ifelse(db>=de, 0, 1-(db/de))]
#exp1[!is.na(db) & my.E==0, .SD, .SDcols=c("db", "de", "E", "my.E")]
gg <- ggplot(data=exp1[!is.na(habitat_type)], aes(x=de, y=my.E, color=habitat_type)) +
geom_point() +
geom_smooth(data=exp1[my.E!=0 & !is.na(habitat_type)], aes(x=de, y=my.E, color=habitat_type), method="lm")
gg
# not conditioned on de
wilcox.test(my.E ~ habitat_type, data=exp1[my.E != 0,] )
kruskal.test(my.E ~ habitat_type, data=exp1[my.E != 0,])
coef(summary(lm(my.E ~ habitat_type, data=exp1[my.E != 0,])))
# conditioned on de
coef(summary(lm(my.E ~ de + habitat_type, data=exp1[my.E != 0,])))
names(exp1)
exp1$time_of_day
gg <- ggplot(data=exp1, aes(x=dtime, y=my.E, color=habitat_type)) +
geom_point()
gg
gg <- ggplot(data=exp1[!is.na(habitat_type)], aes(x=dtime, y=my.E, color=habitat_type)) +
geom_point()
gg
pd <- position_dodge(0.9)
gg <- ggplot(data=exp1[!is.na(habitat_type)], aes(x=time_of_day, y=E, color=habitat_type, group=habitat_type)) +
geom_point(position=pd)
gg
gg <- ggplot(data=exp1[!is.na(habitat_type)], aes(x=dtime, y=my.E, color=habitat_type)) +
geom_point()
gg
pd <- position_dodge(0.9)
gg <- ggplot(data=exp1[!is.na & E <=1], aes(x=time_of_day, y=E, color=habitat_type, group=habitat_type)) +
geom_point(position=pd)
pd <- position_dodge(0.9)
gg <- ggplot(data=exp1[!is.na(habitat_type) & E <=1,], aes(x=time_of_day, y=E, color=habitat_type, group=habitat_type)) +
geom_point(position=pd)
gg
gg <- ggplot(data=exp1[!is.na(habitat_type)], aes(x=dtime, y=my.E, color=habitat_type)) +
geom_point()
gg
kruskal.test(E ~ time_of_day, data=exp1[E <= 1, ])
anova(E ~ time_of_day, data=exp1[E <= 1, ])
anova(lm(E ~ time_of_day, data=exp1[E <= 1, ]))
kruskal.test(E ~ time_of_day, data=exp1[E <= 1, ])
pd <- position_dodge(0.9)
gg <- ggplot(data=exp1[!is.na(habitat_type) & E <=1,], aes(x=time_of_day, y=E, color=habitat_type, group=habitat_type)) +
geom_point(position=pd)
gg
gg <- ggplot(data=exp1[!is.na(habitat_type)], aes(x=dtime, y=my.E, color=habitat_type)) +
geom_point()
gg
blogdown:::serve_site()
pd <- position_dodge(0.9)
gg <- ggplot(data=exp1[!is.na(habitat_type) & E <=1,], aes(x=time_of_day, y=E, color=habitat_type, group=habitat_type)) +
geom_point(position=pd)
gg
gg <- ggplot(data=exp1[!is.na(habitat_type)], aes(x=dtime, y=my.E, color=habitat_type)) +
geom_point()
gg
gg <- ggplot(data=exp1[!is.na(habitat_type)], aes(x=dtime, y=my.E, color=habitat_type)) +
geom_point()
gg
fn <- "FE- CT limit data.csv"
file_path <- paste(data_folder, folder, fn, sep="/")
exp3 <- fread(file_path)
colnames(exp3) <- clean_label(colnames(exp2))
knitr_path <- TRUE
fn <- "FE- CT limit data.csv"
file_path <- paste(data_folder, folder, fn, sep="/")
exp3 <- fread(file_path)
colnames(exp3) <- clean_label(colnames(exp3))
head(exp3)
exp3[, breadth:=Ctmax - Ctmin]
exp3[, breadth:=Ctmax - Ctmin]
anova(lm(breadth ~ habitat_type))
exp3[, breadth:=Ctmax - Ctmin]
anova(lm(breadth ~ habitat_type, data=exp3))
fn <- "FE- sprint data.csv"
file_path <- paste(data_folder, folder, fn, sep="/")
exp3 <- fread(file_path)
colnames(exp3) <- clean_label(colnames(exp3))
fn <- "FE- CT limit data.csv"
file_path <- paste(data_folder, folder, fn, sep="/")
exp4 <- fread(file_path)
colnames(exp4) <- clean_label(colnames(exp4))
head(exp3)
anova(lm(thermal_window ~ habitat_type, data=exp3))
names(exp3)
anova(lm(thermal_window ~ habitat, data=exp3))
exp3[, .(performance_breadth.min=min(thermal_window)), by="habitat"]
exp3
exp3[, my_thermal_window:=Ctmax-Ctmin]
exp3
anova(lm(thermal_window ~ habitat, data=exp3))
anova(lm(my_thermal_window ~ habitat, data=exp3))
exp3[, .(performance_breadth.min=min(my_thermal_window)), by="habitat"]
head(exp3)
exp3[, .(performance_breadth.min=min(Ctmax)), by="habitat"]
exp3[, .(performance_breadth.min=max(Ctmax)), by="habitat"]
exp3[, .(performance_breadth.min=range(my_thermal_window)), by="habitat"]
exp3[, .(performance_breadth.range=range(my_thermal_window)), by="habitat"]
exp3[, .(performance_breadth.range=range(Ctmax)), by="habitat"]
kruskal.test(Ctmax ~ habitat, data=exp3)
unique(exp3$habitat)
range(exp3$Ctmax)
kruskal.test(Ctmax ~ factor(habitat), data=exp3)
exp3[, habitat:=factor(habitat)]
kruskal.test(Ctmax ~ habitat, data=exp3)
qplot(x=habitat, y=Ctmax)
exp3[, habitat:=factor(habitat)]
kruskal.test(Ctmax ~ habitat, data=exp3)
qplot(x=habitat, y=Ctmax, data=exp3)
exp3[, habitat:=factor(habitat)]
kruskal.test(Ctmax ~ habitat, data=exp3)
qplot(x=habitat, y=Ctmax, data=exp3)
fit <- lm(tmax ~ habitat, data=exp3)
exp3[, habitat:=factor(habitat)]
kruskal.test(Ctmax ~ habitat, data=exp3)
qplot(x=habitat, y=Ctmax, data=exp3)
fit <- lm(Ctmax ~ habitat, data=exp3)
plot(fit)
exp3[, habitat:=factor(habitat)]
kruskal.test(Ctmax ~ habitat, data=exp3)
qplot(x=habitat, y=Ctmax, data=exp3)
fit <- lm(Ctmax ~ habitat, data=exp3)
coef(summary(fit))
exp3[, habitat:=factor(habitat)]
kruskal.test(Ctmax ~ habitat, data=exp3)
qplot(x=habitat, y=Ctmax, data=exp3)
fit <- lm(Ctmax ~ habitat, data=exp3)
coef(summary(fit)) # any model for biological consequence of .76C higher Ctmax?
exp3[, habitat:=factor(habitat)]
kruskal.test(Ctmax ~ habitat, data=exp3)
#qplot(x=habitat, y=Ctmax, data=exp3)
#fit <- lm(Ctmax ~ habitat, data=exp3)
#coef(summary(fit)) # any model for biological consequence of .76C higher Ctmax?
exp3[, habitat:=factor(habitat)]
kruskal.test(Ctmax ~ habitat, data=exp3)
#qplot(x=habitat, y=Ctmax, data=exp3)
#fit <- lm(Ctmax ~ habitat, data=exp3)
#coef(summary(fit)) # any model for biological consequence of .76C higher Ctmax?
anova(Ctmin ~ habitat, data=exp3)
exp3[, habitat:=factor(habitat)]
kruskal.test(Ctmax ~ habitat, data=exp3)
#qplot(x=habitat, y=Ctmax, data=exp3)
#fit <- lm(Ctmax ~ habitat, data=exp3)
#coef(summary(fit)) # any model for biological consequence of .76C higher Ctmax?
anova(lm(Ctmin ~ habitat, data=exp3))
exp3[, habitat:=factor(habitat)]
kruskal.test(Ctmax ~ habitat, data=exp3)
#qplot(x=habitat, y=Ctmax, data=exp3)
#fit <- lm(Ctmax ~ habitat, data=exp3)
#coef(summary(fit)) # any model for biological consequence of .76C higher Ctmax?
anova(lm(Ctmin ~ habitat, data=exp3))
confint(lm(Ctmin ~ habitat, data=exp3))
exp3[, habitat:=factor(habitat)]
kruskal.test(Ctmax ~ habitat, data=exp3)
#qplot(x=habitat, y=Ctmax, data=exp3)
#fit <- lm(Ctmax ~ habitat, data=exp3)
#coef(summary(fit)) # any model for biological consequence of .76C higher Ctmax?
anova(lm(Ctmin ~ habitat, data=exp3))
# compare
confint(lm(Ctax ~ habitat, data=exp3))
exp3[, habitat:=factor(habitat)]
kruskal.test(Ctmax ~ habitat, data=exp3)
#qplot(x=habitat, y=Ctmax, data=exp3)
#fit <- lm(Ctmax ~ habitat, data=exp3)
#coef(summary(fit)) # any model for biological consequence of .76C higher Ctmax?
anova(lm(Ctmin ~ habitat, data=exp3))
# compare
confint(lm(Ctmax ~ habitat, data=exp3))
confint(lm(Ctmin ~ habitat, data=exp3))
exp3[, habitat:=factor(habitat)]
kruskal.test(Ctmax ~ habitat, data=exp3)
#qplot(x=habitat, y=Ctmax, data=exp3)
#fit <- lm(Ctmax ~ habitat, data=exp3)
#coef(summary(fit)) # any model for biological consequence of .76C higher Ctmax?
anova(lm(Ctmin ~ habitat, data=exp3))
# compare
confint(lm(Ctmax ~ habitat, data=exp3))
confint(lm(Ctmin ~ habitat, data=exp3))
# compare
coef(lm(Ctmax ~ habitat, data=exp3))[2]
coef(lm(Ctmin ~ habitat, data=exp3))[2]
confint(lm(Ctmax ~ habitat, data=exp3))
confint(lm(Ctmin ~ habitat, data=exp3))
exp3[, .(performance_breadth.range=range(thermal_window)), by="habitat"]
exp3[, .(performance_breadth.range=range(thermal_window, na.rm=TRUE)), by="habitat"]
names(exp1)
exp4
names(exp3)
exp3[, .(Top=mean(Topt)), by=.(habitat)]
exp3[, .(Topt=mean(Topt),
N=.N,
SE=sd(Topt)/sqrt(.N)),
by=.(habitat)]
exp3[, .(Topt=mean(Topt),
N=.N,
SE=sd(Topt)/sqrt(.N)),
by=.(habitat)]
kruskal.test(Topt ~ habitat, data=exp3)
exp3[, .(Ctmax=mean(Ctmax),
N=.N,
SE=sd(Ctmax)/sqrt(.N)),
by=.(habitat)]
kruskal.test(Ctmax ~ habitat, data=exp3)
exp3[, .(Ctmin=mean(Ctmin),
N=.N,
SE=sd(Ctmin)/sqrt(.N)),
by=.(habitat)]
kruskal.test(Ctmin ~ habitat, data=exp3)
names(exp3)
head(exp3)
exp3[, Ct80:=Ctmax-B80]
exp3[, Ct80:=Ctmax-B80]
exp3[, .(Ct80=range(Ct80)), by=habitat]
exp3[, Ct80:=Topt-B80]
exp3[, .(Ct80=range(Ct80)), by=habitat]
head(exp3)
exp3[, Ct80_min:=Topt-B80/2]
exp3[, Ct80_max:=Topt=B80/2]
exp3[, Ct80_min:=Topt-B80/2]
exp3[, Ct80_max:=Topt+B80/2]
exp3[, .(Ct80_min=min(Ct80_min), Ct80_max=max(Ct80_max)), by=habitat]
exp3[, .(pb=range(topt)), by=habitat]
exp3[, .(pb=range(Topt)), by=habitat]
exp3[, ]
exp3[, .(pb=range(Topt)), by=habitat]
names(exp3)
kruskal.test(Pmax ~ habitat)
kruskal.test(Pmax ~ habitat, data=exp3)
blogdown:::serve_site()
head(exp1)
head(exp1)
fit <- lm(db ~ de, data=exp1[Te_30 < Tset])
coef(fit)
summary(fit)$r.squared
anova(fit)
fit <- lm(db ~ de, data=exp1[Te_60 < Tset])
coef(fit)
summary(fit)$r.squared
anova(fit)
fit <- lm(db ~ de, data=exp1[Hot.cold_te=="C"])
coef(fit)
summary(fit)$r.squared
anova(fit)
