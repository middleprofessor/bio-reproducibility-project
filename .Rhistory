theme_minimal()
gg
fake_se_long <- melt(fake_se, id.vars = 'baseline_d', measure.vars = models, variable.name='model', value.name='SE')
head(fake_se_long)
gg <- ggplot(data=fake_se_long, aes(x=baseline_d, y=SE, color=model)) +
geom_point() +
geom_smooth(method='lm') +
xlab("Difference at pre-treatment") +
theme_minimal()
gg
re_run <- TRUE
models <- c('lmm', 'lm', 'cLDA') # include 'cLDA' to compare cLDA to lm
if(re_run==TRUE){
set.seed(1)
varcor <- VarCorr(fit2b)
var <- as.data.frame(VarCorr(fit2b))["vcov"][,1]
rho <- var[1]/sum(var)
fit2b_table <- coefficients(summary(fit2b))
mu1 <- fit2b_table["(Intercept)", "Estimate"]
b <- fit2b_table["Capture_Period13", "Estimate"]
mu <- c(mu1, mu1+b)
sigma <- matrix(c(var[1]+var[2], var[1],var[1], var[1]+var[2]), nrow=2)
inc <- c("1_control","3_8Fclip")
N_table <- bird_wide[Treatment %in% inc, .(N=.N), by=c('Treatment')]
N_table_long <- bird[Treatment %in% inc, .(N=.N), by=c('Treatment', 'Capture_Period')]
n <- sum(N_table[, N])
niter <- 2000
fake_labels <- c('baseline_d', models)
fake_b <- matrix(NA, nrow=niter, ncol=length(fake_labels))
fake_se <- matrix(NA, nrow=niter, ncol=length(fake_labels))
colnames(fake_b) <- fake_labels
colnames(fake_se) <- fake_labels
for(iter in 1:niter){
# data with no effect other than capture period.
Y <- rmvnorm(n, mean=mu, sigma=sigma)
# start with n1=n2
dt_wide <- data.table(ID=paste("bird",1:n,sep=''),
Treatment=factor(rep(c('control', 'clip'), times=c(n/2, n/2))),
pre=Y[,1],
post=Y[,2])
dt_wide[, Treatment:=factor(Treatment, c('control', 'clip'))]
dt_wide[, dMass:=post-pre]
dt <- melt(dt_wide, id.vars=c('ID','Treatment'),
measure.vars=c('pre', 'post'),
variable.name="Capture_Period",
value.name = "Mass"
)
dt[, Capture_Period:=factor(Capture_Period, c('pre', 'post'))]
fake_b[iter, 'baseline_d'] <- mean(dt_wide[Treatment=='clip', pre], na.rm=TRUE) -
mean(dt_wide[Treatment=='control', pre], na.rm=TRUE)
fake_se[iter, 'baseline_d'] <- mean(dt_wide[Treatment=='clip', pre], na.rm=TRUE) -
mean(dt_wide[Treatment=='control', pre], na.rm=TRUE)
fit.lmm <- lmer(Mass ~ Treatment*Capture_Period + (1|ID), dt)
fake_b[iter, 'lmm'] <- coefficients(summary(fit.lmm))['Treatmentclip:Capture_Periodpost', 'Estimate']
fake_se[iter, 'lmm'] <- coefficients(summary(fit.lmm))['Treatmentclip:Capture_Periodpost', 'Std. Error']
fit.lm <- lm(dMass ~ pre + Treatment, data=dt_wide)
fake_b[iter, 'lm'] <- coefficients(summary(fit.lm))['Treatmentclip', 'Estimate']
fake_se[iter, 'lm'] <- coefficients(summary(fit.lm))['Treatmentclip', 'Std. Error']
if('cLDA' %in% models){
# model 2 of liang and zeger - unconstrained and constrained longitudinal data analysis
# adapted from gls code below
dt[, Time:=as.integer(Capture_Period) - 1] # Time has to be dummy coded for mod2 but not sure why
fit.mod2 <- lme(Mass ~ Time + Time:Treatment, random = ~ Time-1|ID,
weights = varIdent(form = ~ 1 | Time),
correlation=corSymm (form = ~ 1 | ID),
data = dt)
fake_b[iter, 'cLDA'] <- coefficients(summary(fit.mod2))['Time:Treatmentclip', 'Value']
fake_se[iter, 'cLDA'] <- coefficients(summary(fit.mod2))['Time:Treatmentclip', 'Std.Error']
# model 2 using gls
# from https://datascienceplus.com/taking-the-baseline-measurement-into-account-constrained-lda-in-r/
# X <- model.matrix(~ Treatment*Capture_Period, data=dt)
# Xalt <- X[,c('Capture_Periodpost', "Treatmentclip:Capture_Periodpost")]
# clda_gls <- gls(Mass ~ Xalt,
#                 weights = varIdent(form = ~ 1 | Capture_Period),
#                 correlation=corSymm (form = ~ 1 | ID),
#                 data = dt)
# coefficients(summary(fit.lmm))
# coefficients(summary(fit.mod2))
# coefficients(summary(fit.lm))
}
}
fake_b <- data.table(fake_b)
fake_se <- data.table(fake_se)
fn <- 'fake_b.RData'
file_path <- paste(base_path, folder, fn, sep='/')
save(fake_b, file = file_path)
fn <- 'fake_se.RData'
file_path <- paste(base_path, folder, fn, sep='/')
save(fake_b, file = file_path)
}else{
fn <- 'fake_b.RData'
file_path <- paste(base_path, folder, fn, sep='/')
load(file_path) # file name is fake_b
fn <- 'fake_se.RData'
file_path <- paste(base_path, folder, fn, sep='/')
load(file_path) # file name is fake_b
}
fake_se_long <- melt(fake_se, id.vars = 'baseline_d', measure.vars = models, variable.name='model', value.name='SE')
gg <- ggplot(data=fake_se_long, aes(x=baseline_d, y=SE, color=model)) +
geom_point() +
geom_smooth(method='lm') +
xlab("Difference at pre-treatment") +
theme_minimal()
gg
blogdown:::serve_site()
base_path <- "content/data"  # console
folder <- '2018-05-07-data-from-success-despite-the-stress'
library(knitr)
library(readxl)
library(ggplot2)
library(data.table)
library(lme4)
library(lmerTest)
library(emmeans)
library(doBy)
library(mvtnorm)
library(nlme) # model 2 of Liang and Zeger 2000
fn <- 'fake_se.RData'
file_path <- paste(base_path, folder, fn, sep='/')
load(file_path) # file name is fake_b
fake_se
file_path
fake_se
data(fake_se)
fn <- 'fake_b.RData'
file_path <- paste(base_path, folder, fn, sep='/')
load(file_path) # file name is fake_b
fn <- 'fake_se.RData'
file_path <- paste(base_path, folder, fn, sep='/')
load(file_path) # file name is fake_b
head(fake_b)
head(fake_se)
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
library(knitr)
library(readxl)
library(ggplot2)
library(data.table)
library(lme4)
library(lmerTest)
library(emmeans)
base_path <- "content/data"  # console
folder <- '2018-06-17-data-from-the-interaction-between-predation-risk-and-food-ration-on-behavior-and-morphology-of-eurasian-perch'
fn <- 'individual data.csv'
file_path <- paste(base_path, folder, fn, sep='/')
fig1 <- fread(filepath)
fig1 <- fread(file_path)
file_path
fig1 <- fread(file_path)
fig1
base_path <- "../data" #knitr
#base_path <- "content/data"  # console
folder <- '2018-06-17-data-from-the-interaction-between-predation-risk-and-food-ration-on-behavior-and-morphology-of-eurasian-perch'
fn <- 'individual data.csv'
file_path <- paste(base_path, folder, fn, sep='/')
fig1 <- fread(file_path)
fig1
fig1 <- NULL
fn <- 'individual data.csv'
file_path <- paste(base_path, folder, fn, sep='/')
fig1 <- fread(file_path)
fig1
aov(Weight ~ Food_Ratio*Pike_presence, data=fig1)
anova(lm(Weight ~ Food_Ratio*Pike_presence, data=fig1))
lmer(Weight ~ Food_Ratio*Pike_presence + (1|Aquarium_ID), data=fig1)
anova(lmer)
fit <- lmer(Weight ~ Food_Ratio*Pike_presence + (1|Aquarium_ID), data=fig1)
anova(fit)
head(fig1)
fit <- lmer(Length ~ Food_Ratio*Pike_presence + (1|Aquarium_ID), data=fig1)
anova(fit)
fit <- lmer(Length ~ Pike_presence*Food_Ratio + (1|Aquarium_ID), data=fig1)
anova(fit)
?lmerTest
?anova.merModLmerTest
fit1a <- lmer(Length ~ Pike_presence*Food_Ratio + (1|Aquarium_ID), data=fig1)
fit1b <- lme(Length ~ Pike_presence*Food_Ratio, random = ~ 1|Aquarium_ID, data=fig1)
library(nlme)
fit1b <- lme(Length ~ Pike_presence*Food_Ratio, random = ~ 1|Aquarium_ID, data=fig1)
anova(fit1a)
anova(fit1b)
anova(fit1.length, type = 1)
fit1.length <- lme(Length ~ Pike_presence*Food_Ratio, random = ~ 1|Aquarium_ID, data=fig1)
anova(fit1.length, type = 1)
?anova.lme
anova(fit1.length, type='sequential')
anova(fit1.length, type='marginal')
anova(lme(Length ~ Pike_presence + Food_Ratio, random = ~ 1|Aquarium_ID, data=fig1), type='sequential')
anova(lme(Length ~ Food_Ratio + Pike_presence, random = ~ 1|Aquarium_ID, data=fig1), type='sequential')
model <- formula(Length ~ Pike_presence*Food_Ratio)
fit1.length <- lme(model, random = ~ 1|Aquarium_ID, data=fig1)
anova(lme(model, random = ~ 1|Aquarium_ID, data=fig1), type='sequential') # Type I
model <- formula(Length ~ Pike_presence*Food_Ratio)
anova(lme(model, random = ~ 1|Aquarium_ID, data=fig1), type='sequential') # Type I
model <- formula(Length ~ Pike_presence*Food_Ratio)
anova(lme(model, random = ~ 1|Aquarium_ID, data=fig1), type='marginal') # Type III
# type II for Food_Ratio
model <- formula(Length ~ Pike_presence + Food_Ratio)
anova(lme(model, random = ~ 1|Aquarium_ID, data=fig1), type='sequential')
# type II for Pike_presence
model <- formula(Length ~ Food_Ratio + Pike_presence)
anova(lme(model, random = ~ 1|Aquarium_ID, data=fig1), type='sequential')
fig1[, ln_weight:=log(Weight)]
fig1[, ln_length:=log(Length)]
fig1[, condition:=residuals(ln_weight ~ ln_length) + ln_weight]
fn <- 'individual data.csv'
file_path <- paste(base_path, folder, fn, sep='/')
dt.fig1 <- fread(file_path)
dt.fig1[, ln_weight:=log(Weight)]
dt.fig1[, ln_length:=log(Length)]
dt.fig1[, condition:=residuals(ln_weight ~ ln_length) + ln_weight]
model <- formula(Length ~ Pike_presence*Food_Ratio)
anova(lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1), type='sequential') # Type I
model <- formula(Length ~ Pike_presence*Food_Ratio)
anova(lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1), type='marginal') # Type III
# type II for Food_Ratio
model <- formula(Length ~ Pike_presence + Food_Ratio)
anova(lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1), type='sequential')
# type II for Pike_presence
model <- formula(Length ~ Food_Ratio + Pike_presence)
anova(lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1), type='sequential')
model <- formula(condition ~ Pike_presence*Food_Ratio)
anova(lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1), type='sequential') # Type I
dt.fig1
?lm
dt.fig1[, condition:=residuals(lm(ln_weight ~ ln_length)) + ln_weight]
dt.fig1
dt.fig1[, condition:=residuals(lm(ln_weight ~ ln_length, na.action="na.exclude")) + ln_weight]
dt.fig1
dt.fig1
model <- formula(condition ~ Pike_presence*Food_Ratio)
anova(lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1), type='sequential') # Type I
model <- formula(Length ~ Pike_presence*Food_Ratio)
anova(lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1), type='marginal') # Type III
model <- formula(condition ~ Pike_presence*Food_Ratio)
anova(lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1), type='marginal') # Type III
fit <- lm(ln_weight ~ ln_length, na.action="na.exclude", data=dt.fig1)
predict(fit, newdata = log(90))
predict(fit, newdata = data.frame(ln_length=log(90)))
fit <- lm(ln_weight ~ ln_length, na.action="na.exclude", data=dt.fig1)
yhat <- predict(fit, newdata = data.frame(ln_length=log(90)))
dt.fig1[, condition:=yhat + residuals(fit)]
model <- formula(condition ~ Pike_presence*Food_Ratio)
anova(lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1), type='sequential') # Type I
model <- formula(condition ~ Pike_presence*Food_Ratio)
anova(lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1), type='marginal') # Type III
fit <- lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1)
anova(fit, type='sequential') # Type I
anova(fit, type='marginal') # Type III
fit.emm <- emmeans(fit, specs=c('Pike_presence', 'Food_Ratio'))
fit.emm
fit.emm <- emmeans(fit, specs=c('Pike_presence', 'Food_Ratio'))
summary(contrast(fit.emm, method='revpairwise'))
summary(contrast(fit.emm, method='eff'))
model <- formula(condition ~ Pike_presence*Food_Ratio)
fit <- lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1)
anova(fit, type='sequential') # Type I
fit.emm <- emmeans(fit, specs=c('Pike_presence', 'Food_Ratio'))
summary(contrast(fit.emm, method='revpairwise'))
#  y,10_medium - n,10_medium -0.13192460 0.04474733 30  -2.948  0.0616
fit.emm
dt.fig1[, condition:=exp(yhat + residuals(fit))]
model <- formula(condition ~ Pike_presence*Food_Ratio)
fit <- lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1)
anova(fit, type='sequential') # Type I
fit.emm <- emmeans(fit, specs=c('Pike_presence', 'Food_Ratio'))
summary(contrast(fit.emm, method='revpairwise'))
fit.emm
dt.fig1[, condition:=exp(yhat) + exp(residuals(fit))]
model <- formula(condition ~ Pike_presence*Food_Ratio)
fit <- lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1)
anova(fit, type='sequential') # Type I
fit.emm <- emmeans(fit, specs=c('Pike_presence', 'Food_Ratio'))
summary(contrast(fit.emm, method='revpairwise'))
fit.emm
yhat
exp(yhat)
residuals(fit)
dt.fig1[, condition:=exp(residuals(fit))]
model <- formula(condition ~ Pike_presence*Food_Ratio)
fit <- lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1)
anova(fit, type='sequential') # Type I
fit.emm <- emmeans(fit, specs=c('Pike_presence', 'Food_Ratio'))
summary(contrast(fit.emm, method='revpairwise'))
fit <- lm(ln_weight ~ ln_length, na.action="na.exclude", data=dt.fig1)
yhat <- predict(fit, newdata = data.frame(ln_length=log(90)))
dt.fig1[, condition:=exp(yhat + residuals(fit))]
model <- formula(condition ~ Pike_presence*Food_Ratio)
fit <- lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1)
anova(fit, type='sequential') # Type I
fit.emm <- emmeans(fit, specs=c('Pike_presence', 'Food_Ratio'))
summary(contrast(fit.emm, method='revpairwise'))
fit.emm
fit <- lm(ln_weight ~ ln_length, na.action="na.exclude", data=dt.fig1)
yhat <- predict(fit, newdata = data.frame(ln_length=log(90)))
dt.fig1[, condition:=exp(yhat) + exp(residuals(fit))]
model <- formula(condition ~ Pike_presence*Food_Ratio)
fit <- lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1)
anova(fit, type='sequential') # Type I
fit.emm <- emmeans(fit, specs=c('Pike_presence', 'Food_Ratio'))
summary(contrast(fit.emm, method='revpairwise'))
fit.emm
fit <- lm(ln_weight ~ ln_length, na.action="na.exclude", data=dt.fig1)
yhat <- predict(fit, newdata = data.frame(ln_length=log(90)))
dt.fig1[, condition:=exp(yhat + residuals(fit))]
model <- formula(condition ~ Pike_presence*Food_Ratio)
fit <- lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1)
anova(fit, type='sequential') # Type I
fit.emm <- emmeans(fit, specs=c('Pike_presence', 'Food_Ratio'))
summary(contrast(fit.emm, method='revpairwise'))
fit.emm
dt.fig1[, .(mean=.(mean(condition))), by=c('Pike_presence', 'Food_Ratio')]
fit <- lm(ln_weight ~ ln_length, na.action="na.exclude", data=dt.fig1)
yhat <- predict(fit, newdata = data.frame(ln_length=log(90)))
dt.fig1[, condition:=yhat + residuals(fit)]
fit <- lm(ln_weight ~ ln_length, na.action="na.exclude", data=dt.fig1)
yhat <- predict(fit, newdata = data.frame(ln_length=log(90)))
dt.fig1[, condition:=yhat + residuals(fit)]
# compute marginal means from transformed data
dt.fig1[, .(mean=.(exp(mean(condition)))), by=c('Pike_presence', 'Food_Ratio')]
dt.fig1[, .(mean=.(exp(mean(condition)))), by=c('Pike_presence', 'Food_Ratio')]
qplot(x=ln_length, y=ln_weight, data=dt.fig1)
head(dt.fig1)
log(93)
dt.fig1[, .(mean=exp(mean(condition))), by=c('Pike_presence', 'Food_Ratio')]
# compute marginal means from back transformed
dt.fig1[, .(mean=mean(exp(condition))), by=c('Pike_presence', 'Food_Ratio')]
# compute marginal means from transformed data then back transform
dt.fig1[, .(mean=exp(mean(condition))), by=c('Pike_presence', 'Food_Ratio')]
# compute marginal means from transformed data then back transform
dt.fig1[, .(mean=exp(mean(condition))), by=c('Pike_presence', 'Food_Ratio')]
dt.fig1[, .(mean=exp(mean(condition))), by=c('Pike_presence', 'Food_Ratio')]
# compute marginal means from back transformed
dt.fig1[, .(mean=mean(exp(condition))), by=c('Pike_presence', 'Food_Ratio')]
dt.fig1[, .(mean=exp(mean(condition)),
SE=exp(sd(condition)/sqrt(.N))
), by=c('Pike_presence', 'Food_Ratio')]
head(dt.fig1)
fit <- lm(ln_weight ~ ln_length, na.action="na.exclude", data=dt.fig1)
yhat <- predict(fit, newdata = data.frame(ln_length=log(90)))
dt.fig1[, condition:=yhat + residuals(fit)]
dt.fig1[, condition2:=exp(yhat + residuals(fit))]
dt.fig1[, condition3:=exp(yhat) + exp(residuals(fit))]
head(dt.fig1)
exp(1.)607385
exp(1.607385)
ln(2)
log(2)
log10(2)
dt.fig1[, .(mean=exp(mean(condition)), # marginal mean then backtransform
SE=exp(sd(condition)/sqrt(.N)),
mean2=mean(condition2),
SE2=sd(condtion2/sqrt(.N)),
mean3=mean(condtion3),
SE3=sd(condition3/sqrt(.N))
), by=c('Pike_presence', 'Food_Ratio')]
dt.fig1[, .(mean=exp(mean(condition)), # marginal mean then backtransform
SE=exp(sd(condition)/sqrt(.N)),
mean2=mean(condition2),
SE2=sd(condition2/sqrt(.N)),
mean3=mean(condtion3),
SE3=sd(condition3/sqrt(.N))
), by=c('Pike_presence', 'Food_Ratio')]
# compute marginal means from back transformed
dt.fig1[, .(mean=exp(mean(condition)), # marginal mean then backtransform
SE=exp(sd(condition)/sqrt(.N)),
mean2=mean(condition2),
SE2=sd(condition2/sqrt(.N)),
mean3=mean(condition3),
SE3=sd(condition3/sqrt(.N))
), by=c('Pike_presence', 'Food_Ratio')]
dt.fig1[, weight.resids:=exp(residuals)]
fit <- lm(ln_weight ~ ln_length, na.action="na.exclude", data=dt.fig1)
yhat <- predict(fit, newdata = data.frame(ln_length=log(90)))
dt.fig1[, weight.resids:=exp(residuals(fit))]
head(dt.fig1)
dt.fig1[, condition4:=exp(residuals(fit))]
dt.fig1[, .(mean=exp(mean(condition)), # marginal mean then backtransform
SE=exp(sd(condition)/sqrt(.N)),
mean2=mean(condition2),
SE2=sd(condition2/sqrt(.N)),
mean3=mean(condition3),
SE3=sd(condition3/sqrt(.N)),
mean4=mean(condition4),
SE4=sd(condition4/sqrt(.N))
), by=c('Pike_presence', 'Food_Ratio')]
dt.fig1[, .(mean=exp(mean(condition)), # marginal mean then backtransform
SE=exp(sd(condition)/sqrt(.N)),
mean2=mean(condition2),
SE2=sd(condition2/sqrt(.N)),
mean3=mean(condition3),
SE3=sd(condition3/sqrt(.N)),
mean4=mean(condition4),
SE4=sd(condition4/sqrt(.N))
), by=c('Pike_presence', 'Food_Ratio')]
cor(dt.fig1[,.SD, .SDcols=c('Length', 'condition', 'condition2', 'condition3', 'condition4')])
fit <- lm(ln_weight ~ Length, na.action="na.exclude", data=dt.fig1)
yhat <- predict(fit, newdata = data.frame(ln_length=90))
head(dt.fig1)
fit <- lm(ln_weight ~ Length, na.action="na.exclude", data=dt.fig1)
yhat <- predict(fit, newdata = data.frame(Length=90))
dt.fig1[, condition:=yhat + residuals(fit)]
dt.fig1[, condition2:=exp(yhat + residuals(fit))]
dt.fig1[, condition3:=exp(yhat) + exp(residuals(fit))]
dt.fig1[, condition4:=exp(residuals(fit))]
dt.fig1[, .(mean=exp(mean(condition)), # marginal mean then backtransform
SE=exp(sd(condition)/sqrt(.N)),
mean2=mean(condition2),
SE2=sd(condition2/sqrt(.N)),
mean3=mean(condition3),
SE3=sd(condition3/sqrt(.N)),
mean4=mean(condition4),
SE4=sd(condition4/sqrt(.N))
), by=c('Pike_presence', 'Food_Ratio')]
yhat
fit <- lm(ln_weight ~ ln_length, na.action="na.exclude", data=dt.fig1)
yhat <- predict(fit, newdata = data.frame(ln_length=log(90)))
yhat
exp(yhat)
mean(residuals(fit))
exp(-1)
exp(0)
exp(.1)
epx(-.1)
exp(-.1)
exp(-.1)-1
exp(.1)-1
fit <- lm(ln_weight ~ ln_length, na.action="na.exclude", data=dt.fig1)
yhat <- predict(fit, newdata = data.frame(ln_length=log(90)))
dt.fig1[, condition:=yhat + residuals(fit)]
dt.fig1[, condition2:=exp(yhat + residuals(fit))]
dt.fig1[, condition3:=exp(yhat) + exp(residuals(fit)) - 1]
dt.fig1[, .(mean=exp(mean(condition)), # marginal mean then backtransform
SE=exp(sd(condition)/sqrt(.N)),
mean2=mean(condition2),
SE2=sd(condition2/sqrt(.N)),
mean3=mean(condition3),
SE3=sd(condition3/sqrt(.N))
), by=c('Pike_presence', 'Food_Ratio')]
model <- formula(condition ~ Pike_presence*Food_Ratio)
fit <- lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1)
anova(fit, type='sequential') # Type I
model <- formula(condition2 ~ Pike_presence*Food_Ratio)
fit <- lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1)
anova(fit, type='sequential') # Type I
model <- formula(condition3 ~ Pike_presence*Food_Ratio)
fit <- lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1)
anova(fit, type='sequential') # Type I
dt.fig1[, .(mean=exp(mean(condition)), # marginal mean then backtransform
SE=exp(sd(condition)/sqrt(.N)),
mean2=mean(condition2), # backtransform then mean
SE2=sd(condition2/sqrt(.N)),
mean3=mean(condition3), # backtransform yhat and residuals then mean
SE3=sd(condition3/sqrt(.N))
), by=c('Pike_presence', 'Food_Ratio')]
model <- formula(condition3 ~ Pike_presence*Food_Ratio)
fit <- lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1)
anova(fit, type='sequential') # Type I
fit.emm <- emmeans(fit, specs=c('Pike_presence', 'Food_Ratio'))
summary(contrast(fit.emm, method='revpairwise'))
#  y,10_medium - n,10_medium -0.13192460 0.04474733 30  -2.948  0.0616
anova(fit, type='marginal') # Type III
# type II for Food_Ratio
model <- formula(condition3 ~ Pike_presence + Food_Ratio)
anova(lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1), type='sequential')
# type II for Pike_presence
model <- formula(condition3 ~ Food_Ratio + Pike_presence)
anova(lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1), type='sequential')
model <- formula(condition3 ~ Pike_presence*Food_Ratio)
fit.condition <- lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1)
anova(fit.condition, type='sequential') # Type I
anova(fit.condition, type='marginal') # Type III
# type II for Food_Ratio
model <- formula(condition3 ~ Pike_presence + Food_Ratio)
anova(lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1), type='sequential')
# type II for Pike_presence
model <- formula(condition3 ~ Food_Ratio + Pike_presence)
anova(lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1), type='sequential')
model <- formula(Length ~ Pike_presence*Food_Ratio)
fit.length <- lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1)
anova(fit.length, type='sequential') # Type I
anova(fit.length, type='marginal') # Type III
# type II for Food_Ratio
model <- formula(Length ~ Pike_presence + Food_Ratio)
anova(lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1), type='sequential')
# type II for Pike_presence
model <- formula(Length ~ Food_Ratio + Pike_presence)
anova(lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1), type='sequential')
condition.emm <- emmeans(fit.condition, specs=c('Pike_presence', 'Food_Ratio'))
summary(contrast(condition.emm, method='revpairwise'))
#  y,10_medium - n,10_medium -0.13192460 0.04474733 30  -2.948  0.0616
inc_rows <- c('y,05_low - n,05_low', 'y,10_medium - n,10_medium', 'y,15_high - n,15_high')
condition.emm <- emmeans(fit.condition, specs=c('Pike_presence', 'Food_Ratio'))
summary(contrast(condition.emm, method='revpairwise'))[inc_rows, ]
condition.contrasts <- data.table(summary(contrast(condition.emm, method='revpairwise')))
condition.contrasts[contrast==inc_rows,]
condition.contrasts[contrast %in% inc_rows,]
condition.contrasts[contrast %in% inc_rows,]
length.emm <- emmeans(fit.length, specs=c('Pike_presence', 'Food_Ratio'))
length.contrasts <- data.table(summary(contrast(length.emm, method='revpairwise')))
length.contrasts[contrast %in% inc_rows,]
blogdown:::serve_site()
fn <- 'behavioral data.csv'
file_path <- paste(base_path, folder, fn, sep='/')
dt.fig2 <- fread(file_path)
dt.fig2
names(dt.fig2)
model <- formula("distance from the partitioning ~ Pike_presence*Food_Ratio")
setnames(dt.fig2, old=c('distance from the partitioning'), new=c('distance_from_predator'))
model <- formula(distance_from_predator ~ Pike_presence*Food_Ratio)
fit.condition <- lme(model, random = ~ 1|Aquarium_ID, data=dt.fig1)
