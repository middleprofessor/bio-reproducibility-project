exp1[!is.na(habitat_type) & !is.na(time_of_day),
.(median_de=median(de, na.rm=TRUE), mean_de=mean(de, na.rm=TRUE)),
by=.(habitat_type, time_of_day)]
# is "time_of_day" column the early/middle split?
qplot(x=time_of_day, y=dtime, data=exp1[time_of_day!=""])
# if it is then the mapping from time to time_of_day is wrong
# re-map time to a new time_of_day column
exp1[, my_time_of_day:=factor(ifelse(dtime >= 8.0 & dtime <= 10.0, "E",
ifelse(dtime >= 11.0 & dtime <= 13.0, "M", NA)))]
# analysis based on author's mapping to time_of_day
exp1[!is.na(habitat_type) & !is.na(time_of_day),
.(median_de=median(de, na.rm=TRUE), mean_de=mean(de, na.rm=TRUE)),
by=.(habitat_type, time_of_day)]
kruskal.test(de ~ time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
# analysis based on my mapping to time_of_day
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
# is "time_of_day" column the early/middle split?
qplot(x=time_of_day, y=dtime, data=exp1[time_of_day!=""])
# if it is then the mapping from time to time_of_day is wrong
# re-map time to a new time_of_day column
exp1[, my_time_of_day:=factor(ifelse(dtime >= 8.0 & dtime <= 10.0, "E",
ifelse(dtime >= 11.0 & dtime <= 13.0, "M", NA)))]
# analysis based on author's mapping to time_of_day
exp1[!is.na(habitat_type) & !is.na(time_of_day),
.(median_de=median(de, na.rm=TRUE), mean_de=mean(de, na.rm=TRUE)),
by=.(habitat_type, time_of_day)]
kruskal.test(de ~ time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
# analysis based on my mapping to time_of_day
exp1[!is.na(habitat_type) & !is.na(my_time_of_day),
.(median_de=median(de, na.rm=TRUE), mean_de=mean(de, na.rm=TRUE)),
by=.(habitat_type, time_of_day)]
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
# is "time_of_day" column the early/middle split?
qplot(x=time_of_day, y=dtime, data=exp1[time_of_day!=""])
# if it is then the mapping from time to time_of_day is wrong
# re-map time to a new time_of_day column
exp1[, my_time_of_day:=factor(ifelse(dtime >= 8.0 & dtime <= 10.0, "E",
ifelse(dtime >= 11.0 & dtime <= 13.0, "M", NA)))]
# analysis based on author's mapping to time_of_day
exp1[!is.na(habitat_type) & !is.na(time_of_day),
.(median_de=median(de, na.rm=TRUE), mean_de=mean(de, na.rm=TRUE)),
by=.(habitat_type, time_of_day)]
kruskal.test(de ~ time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
# analysis based on my mapping to time_of_day
exp1[!is.na(habitat_type) & !is.na(my_time_of_day),
.(median_de=median(de, na.rm=TRUE), mean_de=mean(de, na.rm=TRUE)),
by=.(habitat_type, time_of_day)]
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
# is "time_of_day" column the early/middle split?
qplot(x=time_of_day, y=dtime, data=exp1[time_of_day!=""])
# if it is then the mapping from time to time_of_day is wrong
# re-map time to a new time_of_day column
exp1[, my_time_of_day:=factor(ifelse(dtime >= 8.0 & dtime <= 10.0, "E",
ifelse(dtime >= 11.0 & dtime <= 13.0, "M", NA)))]
# analysis based on author's mapping to time_of_day
exp1[!is.na(habitat_type) & !is.na(time_of_day),
.(median_de=median(de, na.rm=TRUE), mean_de=mean(de, na.rm=TRUE)),
by=.(habitat_type, time_of_day)]
kruskal.test(de ~ time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
# analysis based on my mapping to time_of_day
exp1[!is.na(habitat_type) & !is.na(my_time_of_day),
.(median_de=median(de, na.rm=TRUE), mean_de=mean(de, na.rm=TRUE)),
by=.(habitat_type, my_time_of_day)]
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
fn <- "table1.png"
if(knitr_path==TRUE){
image_path <- paste("../images", folder, fn, sep="/")
}else{
image_path <- paste("/images", folder, fn, sep="/")
}
knitr::include_graphics(image_path)
knitr_path <- TRUE
fn <- "table1.png"
if(knitr_path==TRUE){
image_path <- paste("../images", folder, fn, sep="/")
}else{
image_path <- paste("/images", folder, fn, sep="/")
}
knitr::include_graphics(image_path)
# is "time_of_day" column the early/middle split?
qplot(x=time_of_day, y=dtime, data=exp1[time_of_day!=""])
# if it is then the mapping from time to time_of_day is wrong
# re-map time to a new time_of_day column
exp1[, my_time_of_day:=factor(ifelse(dtime >= 8.0 & dtime <= 10.0, "E",
ifelse(dtime >= 11.0 & dtime <= 13.0, "M", NA)))]
# analysis based on author's mapping to time_of_day
exp1[!is.na(habitat_type) & !is.na(time_of_day) & !is.na(de),
.(N=.N, median_de=median(de, na.rm=TRUE), mean_de=mean(de, na.rm=TRUE)),
by=.(habitat_type, time_of_day)]
kruskal.test(de ~ time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
# analysis based on my mapping to time_of_day
exp1[!is.na(habitat_type) & !is.na(my_time_of_day),
.(median_de=median(de, na.rm=TRUE), mean_de=mean(de, na.rm=TRUE)),
by=.(habitat_type, my_time_of_day)]
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
# is "time_of_day" column the early/middle split?
qplot(x=time_of_day, y=dtime, data=exp1[time_of_day!=""])
# if it is then the mapping from time to time_of_day is wrong
# re-map time to a new time_of_day column
exp1[, my_time_of_day:=factor(ifelse(dtime >= 8.0 & dtime <= 10.0, "E",
ifelse(dtime >= 11.0 & dtime <= 13.0, "M", NA)))]
# analysis based on author's mapping to time_of_day
exp1[!is.na(habitat_type) & !is.na(time_of_day) & !is.na(de),
.(N=.N, median_de=median(de, na.rm=TRUE), mean_de=mean(de, na.rm=TRUE)),
by=.(habitat_type, time_of_day)]
kruskal.test(de ~ time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
# analysis based on my mapping to time_of_day
exp1[!is.na(habitat_type) & !is.na(my_time_of_day),
.(median_de=median(de, na.rm=TRUE),
mean_de=mean(de, na.rm=TRUE),
SE=sd(de)/sqrt(.N)),
by=.(habitat_type, my_time_of_day)]
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
# is "time_of_day" column the early/middle split?
qplot(x=time_of_day, y=dtime, data=exp1[time_of_day!=""])
# if it is then the mapping from time to time_of_day is wrong
# re-map time to a new time_of_day column
exp1[, my_time_of_day:=factor(ifelse(dtime >= 8.0 & dtime <= 10.0, "E",
ifelse(dtime >= 11.0 & dtime <= 13.0, "M", NA)))]
# analysis based on author's mapping to time_of_day
exp1[!is.na(habitat_type) & !is.na(time_of_day) & !is.na(de),
.(N=.N,
median_de=median(de, na.rm=TRUE),
mean_de=mean(de, na.rm=TRUE),
SE=sd(de)/sqrt(.N)),
by=.(habitat_type, time_of_day)]
kruskal.test(de ~ time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
# analysis based on my mapping to time_of_day
exp1[!is.na(habitat_type) & !is.na(my_time_of_day),
.(median_de=median(de, na.rm=TRUE),
mean_de=mean(de, na.rm=TRUE)),
by=.(habitat_type, my_time_of_day)]
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
exp1[!is.na(habitat_type) & !is.na(my_time_of_day) &!is.na(de),
.(max=max(de, na.rm=TRUE)),
by=.(habitat_type, my_time_of_day)]
# is "time_of_day" column the early/middle split?
qplot(x=time_of_day, y=dtime, data=exp1[time_of_day!=""])
# if it is then the mapping from time to time_of_day is wrong
# re-map time to a new time_of_day column based on what the author's write
exp1[, my_time_of_day:=factor(ifelse(dtime >= 8.0 & dtime <= 10.0, "E",
ifelse(dtime >= 11.0 & dtime <= 13.0, "M", NA)))]
# re-map time to a new time_of_day column based on 8-11
exp1[, my_time_of_day2:=factor(ifelse(dtime >= 8.0 & dtime <= 11.0, "E",
ifelse(dtime > 11.0 & dtime <= 13.0, "M", NA)))]
# analysis based on author's mapping to time_of_day
exp1[!is.na(habitat_type) & !is.na(time_of_day) & !is.na(de),
.(N=.N,
median_de=median(de, na.rm=TRUE),
mean_de=mean(de, na.rm=TRUE),
SE=sd(de)/sqrt(.N)),
by=.(habitat_type, time_of_day)]
kruskal.test(de ~ time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
# analysis based on my mapping to time_of_day
exp1[!is.na(habitat_type) & !is.na(my_time_of_day),
.(median_de=median(de, na.rm=TRUE),
mean_de=mean(de, na.rm=TRUE)),
by=.(habitat_type, my_time_of_day)]
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
# analysis based on my mapping to time_of_day from 8-11 to "E"
# re-map time to a new time_of_day column based on 8-11
exp1[, my_time_of_day2:=factor(ifelse(dtime >= 8.0 & dtime <= 11.0, "E",
ifelse(dtime > 11.0 & dtime <= 13.0, "M", NA)))]
exp1[!is.na(habitat_type) & !is.na(my_time_of_day2) & !is.na(de),
.(median_de=median(de, na.rm=TRUE),
mean_de=mean(de, na.rm=TRUE)),
by=.(habitat_type, my_time_of_day2)]
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ my_time_of_day, data=exp1[habitat_type=="SPS"], na.action="na.omit")
# analysis based on my mapping to time_of_day from 8-11 to "E"
# re-map time to a new time_of_day column based on 8-11
exp1[, my_time_of_day2:=factor(ifelse(dtime >= 8.0 & dtime <= 11.0, "E",
ifelse(dtime > 11.0 & dtime <= 13.0, "M", NA)))]
exp1[!is.na(habitat_type) & !is.na(my_time_of_day2) & !is.na(de),
.(N=.N,
median_de=median(de, na.rm=TRUE),
mean_de=mean(de, na.rm=TRUE)),
by=.(habitat_type, my_time_of_day2)]
kruskal.test(de ~ my_time_of_day2, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ my_time_of_day2, data=exp1[habitat_type=="SPS"], na.action="na.omit")
# analysis based on my mapping to time_of_day from 8-11 to "E"
# re-map time to a new time_of_day column based on 8-11
exp1[, my_time_of_day2:=factor(ifelse(dtime >= 8.0 & dtime < 11.0, "E",
ifelse(dtime >= 11.0 & dtime <= 13.0, "M", NA)))]
exp1[!is.na(habitat_type) & !is.na(my_time_of_day2) & !is.na(de),
.(N=.N,
median_de=median(de, na.rm=TRUE),
mean_de=mean(de, na.rm=TRUE)),
by=.(habitat_type, my_time_of_day2)]
kruskal.test(de ~ my_time_of_day2, data=exp1[habitat_type=="LLP"], na.action="na.omit")
kruskal.test(de ~ my_time_of_day2, data=exp1[habitat_type=="SPS"], na.action="na.omit")
fn <- "FE- encounter rate data.csv"
file_path <- paste(data_folder, folder, fn, sep="/")
exp2 <- fread(file_path)
head(exp2)
colnames(exp2) <- clean_label(colnames(exp2))
names(exp2)
# function to remove spaces and units from column labels
# Jeff Walker
# November 12, 2018
clean_label <- function(x){
# clean units in parentheses and units with space in front of parenthesis
x <- gsub(" \\s*\\([^\\)]+\\)","", x)
# clean units in parentheses and units without space in front of parenthesis
x <- gsub("\\s*\\([^\\)]+\\)","", x)
#remove spaces
x <- gsub(" ", "_", x)
# replace hash with "n"
x <- gsub("#", "n_", x)
# replace % with "perc"
x <- gsub("%", "perc_", x)
# get rid of any double "__"
x <- gsub("__", "_", x)
# replace hyphens
x <- gsub("-", "_", x)
# replace forward slash
x <- gsub("/", ".", x)
return(x)
}
colnames(exp2) <- clean_label(colnames(exp2))
names(exp2)
head(exp2)
unique(exp2$habitat_type)
exp2[, Early.Midday:=factor(ifelse(Early.Midday=="", NA, Early.Midday))]
levels(exp2$Early.Midday)
exp2[, Early.Midday:=factor(ifelse(Early.Midday=="", NA, Early.Midday))]
kruskal.test(number_seen ~ Early.Midday, data=exp2[, habitat_type=="LLP"])
exp2[, Early.Midday:=factor(ifelse(Early.Midday=="", NA, Early.Midday))]
kruskal.test(number_seen ~ Early.Midday, data=exp2[habitat_type=="LLP"])
exp2[, Early.Midday:=factor(ifelse(Early.Midday=="", NA, Early.Midday))]
kruskal.test(number_seen ~ Early.Midday, data=exp2[habitat_type=="LLP"])
kruskal.test(number_seen ~ Early.Midday, data=exp2[habitat_type=="SPS"])
round(5.7859,2)
head(exp2)
library(MASS)
fit.nb <-glm.nb(number_seen ~ hour, data=exp2)
fit.nb <-glm.nb(number_seen ~ hour*habitat_type, data=exp2)
fit.nb <-glm(number_seen ~ hour*habitat_type, family=poisson, data=exp2)
coef(summary(fit.nb))
# fit.nb <-glm.nb(number_seen ~ hour*habitat_type, data=exp2)
fit.pois <-glm(number_seen ~ hour*habitat_type, family=poisson, data=exp2)
coef(summary(fit.fit.pois))
# fit.nb <-glm.nb(number_seen ~ hour*habitat_type, data=exp2)
fit.pois <-glm(number_seen ~ hour*habitat_type, family=poisson, data=exp2)
coef(summary(fit.pois))
fit.lm <-lm(number_seen ~ hour*habitat_type, data=exp2)
coef(summary(fit.lm))
# fit.nb <-glm.nb(number_seen ~ hour*habitat_type, data=exp2)
fit.pois <-glm(number_seen ~ hour*habitat_type, family=poisson, data=exp2)
coef(summary(fit.pois))
fit.lm <-lm(number_seen ~ hour*habitat_type, data=exp2)
coef(summary(fit.lm))
fit.pois <-glm(number_seen ~ hour, family=poisson, data=exp2[habitat_type=="SPS",])
coef(summary(fit.pois))
fit.lm <-lm(number_seen ~ hour, data=exp2[habitat_type=="SPS",])
coef(summary(fit.lm))
exp2_sum <- exp2[!is.na(number_seen),
.(number_seen=mean(number_seen),
SE=sd(number_seen)/sqrt(.N)),
by=.(hour, habitat_type)]
exp2_sum <- exp2[!is.na(number_seen),
.(number_seen=mean(number_seen),
SE=sd(number_seen)/sqrt(.N)),
by=.(hour, habitat_type)]
pd <- position_dodge(0.9)
gg <- ggplot(data=exp2_sum, aes(x=hour, y=number_seen, fill=habitat_type)) +
geom_col(position=pd) +
geom_errorbar(position=pd, width=0.2)+
NULL
gg
exp2_sum <- exp2[!is.na(number_seen),
.(number_seen=mean(number_seen),
SE=sd(number_seen)/sqrt(.N)),
by=.(hour, habitat_type)]
pd <- position_dodge(0.9)
gg <- ggplot(data=exp2_sum, aes(x=hour, y=number_seen, fill=habitat_type)) +
geom_col(position=pd) +
geom_errorbar(aes(ymin=number_seen-SE, ymax=number_seen+SE), position=pd, width=0.2)+
NULL
gg
fit.nb <-glm.nb(number_seen ~ hour*habitat_type, data=exp2)
library(DHARMa)
fit.pois <-glm(number_seen ~ hour, family=poisson, data=exp2[habitat_type=="SPS",])
coef(summary(fit.pois))
fit.lm <-lm(number_seen ~ hour, data=exp2[habitat_type=="SPS",])
coef(summary(fit.lm))
# model check the poisson fit
n_sim <- 250
simulationOutput <- simulateResiduals(fittedModel=fit.pois, n=n_sim, refit=TRUE)
plot(simulationOutput)
testDispersion(simulationOutput)
blogdown:::serve_site()
fn <- "FE- thermal index data.csv"
file_path <- paste(data_folder, folder, fn, sep="/")
exp1 <- fread(file_path)
colnames(exp1) <- clean_label(colnames(exp1))
fn <- "FE- encounter rate data.csv"
file_path <- paste(data_folder, folder, fn, sep="/")
exp2 <- fread(file_path)
colnames(exp2) <- clean_label(colnames(exp2))
# discovered when doing kruskal-wallis
# there are many observations where habitat_type is "" (an empty space)
unique(exp1$habitat_type) # there is a "" present
exp1[, habitat_type:=factor(ifelse(habitat_type=="", NA, habitat_type))]
exp1[, time_of_day:=factor(ifelse(time_of_day=="", NA, time_of_day))]
#convert time from string to time
time.step1 <- format(strptime(exp1$time, "%I:%M:%S %p"), format="%H:%M:%S")
time.step2 <- as.POSIXct(time.step1,format="%H:%M:%S")
exp1[, dtime := hour(time.step2) + minute(time.step2)/60 + second(time.step2)/3600]
names(exp2)
names(exp1)
fit1 <- lm(db ~ da, data=exp1)
fit1 <- lm(db ~ de, data=exp1)
coef(fit1)
anova(fit1)
names(exp1)
fit1 <- lm(db ~ de, data=exp1[Te_30 < Tset])
coef(fit1)
anova(fit1)
fit1 <- lm(db ~ de, data=exp1[Te_60 < Tset])
coef(fit1)
anova(fit1)
fit1 <- lm(db ~ de, data=exp1[Te_30 < Tset])
coef(fit1)
anova(fit1)
fit1 <- lm(db ~ de, data=exp1[Te_30 < Tset])
coef(fit1)
summary(fit1)$r.squared
anova(fit1)
fit1a <- lm(db ~ de, data=exp1[Te_30 < Tset])
coef(fit1a)
summary(fit1a)$r.squared
anova(fit1a)
fit1b <- lm(db ~ de, data=exp1[Te_60 < Tset])
coef(fit1a)
summary(fit1a)$r.squared
anova(fit1a)
fit <- lm(db ~ de, data=exp1[Te_30 < Tset])
coef(fit)
summary(fit)$r.squared
anova(fit)
fit <- lm(db ~ de, data=exp1[Te_30 > Tset])
coef(fit)
summary(fit)$r.squared
anova(fit)
fit <- lm(db ~ de, data=exp1[Te_30 >= Tset])
coef(fit)
summary(fit)$r.squared
anova(fit)
fit <- lm(db ~ de, data=exp1[Te_60 >= Tset])
coef(fit)
summary(fit)$r.squared
anova(fit)
fit <- lm(db ~ de, data=exp1[Te_60 > Tset])
coef(fit)
summary(fit)$r.squared
anova(fit)
fit <- lm(db ~ de, data=exp1[Te_30 > Tset])
coef(fit)
summary(fit)$r.squared
anova(fit)
fit <- lm(db ~ de, data=exp1[Te_30 < Tset])
coef(fit)
summary(fit)$r.squared
anova(fit)
fit <- lm(db ~ de, data=exp1[Te_60 < Tset])
coef(fit)
summary(fit)$r.squared
anova(fit)
blogdown:::serve_site()
exp1[, Te.m.Tset:=Te-Tset]
names(exp1)
exp1[, Te.m.Tset:=Te_30-Tset]
exp1[, Te.m.Tset:=Te_30-Tset]
coef(summary(lm(db ~ de*Te.m.Tset, data=exp1)))
names(exp1)
names(exp1)
qplot(x=Hot.cold_te, y=(Te_30-Tset), data=exp1)
levels(exp1$Hot.cold_te)
levels(exp1$Hot.cold_te)
# create my own column
exp1[, Hot.cold_te:=factor(ifelse(Hot.cold_te=="", NA, Hot.cold_te))]
levels(exp1$Hot.cold_te)
exp1$Te_30
# create my own column
exp1[, Hot.cold_te:=factor(ifelse(Hot.cold_te=="", NA, Hot.cold_te))]
exp1[, my.Hot.cold_te:=factor(ifelse(Te_30 < Tset, "C", "Hot"))]
levels(my.Hot.cold_te)
levels(exp1$my.Hot.cold_te)
# create my own column
exp1[, Hot.cold_te:=factor(ifelse(Hot.cold_te=="", NA, Hot.cold_te))]
exp1[, my.Hot.cold_te:=factor(ifelse(Te_30 < Tset, "C", "H"))]
# create my own column
exp1[, Hot.cold_te:=factor(ifelse(Hot.cold_te=="", NA, Hot.cold_te))]
exp1[, my.Hot.cold_te:=factor(ifelse(Te_30 < Tset, "C", "H"))]
qplot(x=Te_30, y=db, color=Hot.cold_te) + geom_smooth(method="lm")
# create my own column
exp1[, Hot.cold_te:=factor(ifelse(Hot.cold_te=="", NA, Hot.cold_te))]
exp1[, my.Hot.cold_te:=factor(ifelse(Te_30 < Tset, "C", "H"))]
qplot(x=Te_30, y=db, color=Hot.cold_te, data=exp1) + geom_smooth(method="lm")
range(exp1$db)
range(exp1$db, na.rm=TRUE)
range(exp1$de, na.rm=TRUE)
range(exp1$de, na.rm=TRUE)
# create my own column
exp1[, Hot.cold_te:=factor(ifelse(Hot.cold_te=="", NA, Hot.cold_te))]
exp1[, my.Hot.cold_te:=factor(ifelse(Te_30 < Tset, "C", "H"))]
# "Accuracy in thermoregulation (db) is defined as the deviation of field active body temperatures (Tb) from the preferred temperature (Tset)." -- db is only positive so must be the absolute deviation.
# "The thermal quality of the habitat (de) is defined as the deviations of operative temperatures (Te) from the preferred temperature range (Tset). Thermal quality (de) is typically regarded as high for values less than 3 and low for values greater than 5" -- again its the absolute deviation
qplot(x=de, y=db, color=Hot.cold_te, data=exp1) + geom_smooth(method="lm")
levels(exp1$Hot.cold_te)
fn <- "FE- thermal index data.csv"
file_path <- paste(data_folder, folder, fn, sep="/")
exp1 <- fread(file_path)
colnames(exp1) <- clean_label(colnames(exp1))
fn <- "FE- encounter rate data.csv"
file_path <- paste(data_folder, folder, fn, sep="/")
exp2 <- fread(file_path)
colnames(exp2) <- clean_label(colnames(exp2))
# discovered when doing kruskal-wallis
# there are many observations where habitat_type is "" (an empty space)
unique(exp1$habitat_type) # there is a "" present
exp1[, habitat_type:=factor(ifelse(habitat_type=="", NA, habitat_type))]
exp1[, time_of_day:=factor(ifelse(time_of_day=="", NA, time_of_day))]
#convert time from string to time
time.step1 <- format(strptime(exp1$time, "%I:%M:%S %p"), format="%H:%M:%S")
time.step2 <- as.POSIXct(time.step1,format="%H:%M:%S")
exp1[, dtime := hour(time.step2) + minute(time.step2)/60 + second(time.step2)/3600]
# create my own column
exp1[, Hot.cold_te:=factor(ifelse(Hot.cold_te=="", NA, Hot.cold_te))]
exp1[, my.Hot.cold_te:=factor(ifelse(Te_30 < Tset, "C", "H"))]
# "Accuracy in thermoregulation (db) is defined as the deviation of field active body temperatures (Tb) from the preferred temperature (Tset)." -- db is only positive so must be the absolute deviation.
# "The thermal quality of the habitat (de) is defined as the deviations of operative temperatures (Te) from the preferred temperature range (Tset). Thermal quality (de) is typically regarded as high for values less than 3 and low for values greater than 5" -- again its the absolute deviation
qplot(x=de, y=db, color=Hot.cold_te, data=exp1) + geom_smooth(method="lm")
levels(exp1$Hot.cold_te)
# create my own column
# "Accuracy in thermoregulation (db) is defined as the deviation of field active body temperatures (Tb) from the preferred temperature (Tset)." -- db is only positive so must be the absolute deviation.
# "The thermal quality of the habitat (de) is defined as the deviations of operative temperatures (Te) from the preferred temperature range (Tset). Thermal quality (de) is typically regarded as high for values less than 3 and low for values greater than 5" -- again its the absolute deviation
qplot(x=de, y=db, color=Hot.cold_te, data=exp1) + geom_smooth(method="lm")
anova(lm(db ~ de*Hot.cold_te, data=exp1))
# create my own column
# "Accuracy in thermoregulation (db) is defined as the deviation of field active body temperatures (Tb) from the preferred temperature (Tset)." -- db is only positive so must be the absolute deviation.
# "The thermal quality of the habitat (de) is defined as the deviations of operative temperatures (Te) from the preferred temperature range (Tset). Thermal quality (de) is typically regarded as high for values less than 3 and low for values greater than 5" -- again its the absolute deviation
qplot(x=de, y=db, color=Hot.cold_te, data=exp1) + geom_smooth(method="lm")
anova(lm(db ~ de*Hot.cold_te, data=exp1))
anova(lm(db ~ de+Hot.cold_te, data=exp1))
# create my own column
# "Accuracy in thermoregulation (db) is defined as the deviation of field active body temperatures (Tb) from the preferred temperature (Tset)." -- db is only positive so must be the absolute deviation.
# "The thermal quality of the habitat (de) is defined as the deviations of operative temperatures (Te) from the preferred temperature range (Tset). Thermal quality (de) is typically regarded as high for values less than 3 and low for values greater than 5" -- again its the absolute deviation
qplot(x=de, y=db, color=Hot.cold_te, data=exp1) + geom_smooth(method="lm")
anova(lm(db ~ de*Hot.cold_te, data=exp1))
anova(lm(db ~ de+Hot.cold_te, data=exp1))
anova(lm(db ~ de*my.Hot.cold_te, data=exp1))
anova(lm(db ~ de+my.Hot.cold_te, data=exp1))
qplot(x=Hot.cold_te, y=(Te_30-Tset), data=exp1)
levels(exp1$Hot.cold_te)
qplot(x=Hot.cold_te, y=(Te_30-Tset), data=exp1)
qplot(x=Hot.cold_te, y=(Te_30-Tset), data=exp1[!is.na(Hot.cold_te),])
# "Accuracy in thermoregulation (db) is defined as the deviation of field active body temperatures (Tb) from the preferred temperature (Tset)." -- db is only positive so must be the absolute deviation.
# "The thermal quality of the habitat (de) is defined as the deviations of operative temperatures (Te) from the preferred temperature range (Tset). Thermal quality (de) is typically regarded as high for values less than 3 and low for values greater than 5" -- again its the absolute deviation
qplot(x=de, y=db, color=Hot.cold_te, data=exp1) + geom_smooth(method="lm")
anova(lm(db ~ de*Hot.cold_te, data=exp1))
anova(lm(db ~ de+Hot.cold_te, data=exp1))
exp1[is.na(Hot.cold_te)]
# "Accuracy in thermoregulation (db) is defined as the deviation of field active body temperatures (Tb) from the preferred temperature (Tset)." -- db is only positive so must be the absolute deviation.
# "The thermal quality of the habitat (de) is defined as the deviations of operative temperatures (Te) from the preferred temperature range (Tset). Thermal quality (de) is typically regarded as high for values less than 3 and low for values greater than 5" -- again its the absolute deviation
qplot(x=de, y=db, color=Hot.cold_te, data=exp1) + geom_smooth(method="lm")
anova(lm(db ~ de*Hot.cold_te, data=exp1[!is.na(Hot.cold_te),]))
anova(lm(db ~ de+Hot.cold_te, data=exp1[!is.na(Hot.cold_te),]))
# "Accuracy in thermoregulation (db) is defined as the deviation of field active body temperatures (Tb) from the preferred temperature (Tset)." -- db is only positive so must be the absolute deviation.
# "The thermal quality of the habitat (de) is defined as the deviations of operative temperatures (Te) from the preferred temperature range (Tset). Thermal quality (de) is typically regarded as high for values less than 3 and low for values greater than 5" -- again its the absolute deviation
qplot(x=de, y=db, color=Hot.cold_te, data=exp1[!is.na(Hot.cold_te),]) + geom_smooth(method="lm")
anova(lm(db ~ de*Hot.cold_te, data=exp1[!is.na(Hot.cold_te),]))
anova(lm(db ~ de+Hot.cold_te, data=exp1[!is.na(Hot.cold_te),]))
# "Accuracy in thermoregulation (db) is defined as the deviation of field active body temperatures (Tb) from the preferred temperature (Tset)." -- db is only positive so must be the absolute deviation.
# "The thermal quality of the habitat (de) is defined as the deviations of operative temperatures (Te) from the preferred temperature range (Tset). Thermal quality (de) is typically regarded as high for values less than 3 and low for values greater than 5" -- again its the absolute deviation
qplot(x=de, y=db, color=Hot.cold_te, data=exp1[!is.na(Hot.cold_te),]) + geom_smooth(method="lm")
anova(lm(db ~ de*Hot.cold_te, data=exp1))
anova(lm(db ~ de+Hot.cold_te, data=exp1))
anova(lm(db ~ de*Hot.cold_te, data=exp1[!is.na(Hot.cold_te),]))
anova(lm(db ~ de+Hot.cold_te, data=exp1[!is.na(Hot.cold_te),]))
# "Accuracy in thermoregulation (db) is defined as the deviation of field active body temperatures (Tb) from the preferred temperature (Tset)." -- db is only positive so must be the absolute deviation.
# "The thermal quality of the habitat (de) is defined as the deviations of operative temperatures (Te) from the preferred temperature range (Tset). Thermal quality (de) is typically regarded as high for values less than 3 and low for values greater than 5" -- again its the absolute deviation
qplot(x=de, y=db, color=Hot.cold_te, data=exp1[!is.na(Hot.cold_te),]) + geom_smooth(method="lm")
anova(lm(db ~ de*Hot.cold_te, data=exp1))
anova(lm(db ~ de+Hot.cold_te, data=exp1))
# "Accuracy in thermoregulation (db) is defined as the deviation of field active body temperatures (Tb) from the preferred temperature (Tset)." -- db is only positive so must be the absolute deviation.
# "The thermal quality of the habitat (de) is defined as the deviations of operative temperatures (Te) from the preferred temperature range (Tset). Thermal quality (de) is typically regarded as high for values less than 3 and low for values greater than 5" -- again its the absolute deviation
anova(lm(db ~ de*Hot.cold_te, data=exp1))
anova(lm(db ~ de+Hot.cold_te, data=exp1))
qplot(x=de, y=db, color=Hot.cold_te, data=exp1[!is.na(Hot.cold_te),]) + geom_smooth(method="lm")
qplot(x=de, y=db, color=Hot.cold_te, data=exp1[!is.na(Hot.cold_te),]) + geom_smooth(method="lm")
qplot(x=de, y=db, color=habitat_type, data=exp1[!is.na(habitat_type),]) + geom_smooth(method="lm")
qplot(x=de, y=db, color=Hot.cold_te, data=exp1[!is.na(Hot.cold_te),]) + geom_smooth(method="lm")
qplot(x=de, y=db, color=habitat_type, data=exp1[!is.na(habitat_type),]) + geom_smooth(method="lm")
qplot(x=de, y=db, color=Hot.cold_te, data=exp1[!is.na(Hot.cold_te),]) + geom_smooth(method="lm")
