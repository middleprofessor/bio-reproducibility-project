anova(fit, type="marginal")
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
?corClasses
names(ecosystem)
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ 1 | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id/days, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ 1|id/days, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id/days, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ treatment|id/days, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ 1|id/days, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id/days, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id/days, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ treatment|id/days, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="ML")
anova(fit, type="marginal")
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="ML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="ML")
anova(fit, type="marginal")
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme((GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme((GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme((Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme((GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
head(ecosystem)
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme((GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme((GPP) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme((GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme((Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme((Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ 1 | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme((Chl) ~ treatment*days, random = ~ 1|id/days, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme((Chl) ~ treatment*days, random = ~ 1|id/treatment, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme((Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme((Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(sqrt(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme((Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(log(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme(log(GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
fit <- lme((GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
anova(fit, type="marginal")
# use the models that reproduce, not the models specified in methods
m1 <- lme((GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
emtrends(m1, pairwise ~ treatment, var = "days")
?emtrends
# use the models that reproduce, not the models specified in methods
m1 <- lme((GPP.no0) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
emtrends(m1, pairwise ~ treatment, var = "days")
m2 <- lme(log(Chl) ~ treatment*days, random = ~ 1|id, correlation=corCAR1(form = ~ days | id), data=ecosystem, method="REML")
emtrends(m2, pairwise ~ treatment, var = "days")
800/40/4.3
1200/40/4.25
#$271/credit for instate
271*3*70
40*3*27
40*3*271
80*3*271
20*1.5*271
fn <- "Subalusky_2018_mara_river_biofilm_summary_data.csv"
file_path <- paste(data_folder, folder, fn, sep="/")
river <- fread(file_path)
head(river)
fit <- lm(GPP ~ site, data=river)
(fit.emm <- emmeans(fit, specs="site"))
contrast(fit.emm, method="revpairwise")
site_levels <- c("No Wildlife", "Hippo", "Hippo + WB")
river[, site_keyed:=factor(ifelse(site=="Site 1", site_levels[1],
ifelse(site=="Site 2", site_levels[2], site_levels[3])),
site_levels)
]
fit <- lm(GPP ~ site_keyed, data=river)
(fit.emm <- emmeans(fit, specs="site"))
site_levels <- c("No Wildlife", "Hippo", "Hippo + WB")
river[, site_fac:=factor(ifelse(site=="Site 1", site_levels[1],
ifelse(site=="Site 2", site_levels[2], site_levels[3])),
site_levels)
]
fit <- lm(GPP ~ site_fac, data=river)
(fit.emm <- emmeans(fit, specs="site_fac"))
contrast(fit.emm, method="revpairwise")
fit <- lm(Chl ~ site_fac, data=river)
(fit.emm <- emmeans(fit, specs="site_fac"))
contrast(fit.emm, method="revpairwise")
fit <- lm(Chl ~ site_fac, data=river)
anova(fit)
(fit.emm <- emmeans(fit, specs="site_fac"))
contrast(fit.emm, method="revpairwise")
head(river)
fit <- lm(Chl ~ site.wb, data=river)
anova(fit)
unique(river$site.wb)
dim(river)
names(river)
tail(river)
fit <- lm(Chl ~ site.wb, data=river)
anova(fit)
(fit.emm <- emmeans(fit, specs="site.wb"))
contrast(fit.emm, method="revpairwise")
river[, .(Chl=mean(Chl), N=.N), by=.(site.wb)]
fit <- lm(CR ~ site_fac, data=river)
anova(fit)
fit <- lm(CR ~ site_fac, data=river)
anova(fit)
(fit.emm <- emmeans(fit, specs="site_fac"))
contrast(fit.emm, method="revpairwise")
fit <- lm(AFDM ~ site_fac, data=river)
anova(fit)
(fit.emm <- emmeans(fit, specs="site_fac"))
contrast(fit.emm, method="revpairwise")
river[, .(Chl=mean(Chl), N=.N), by=.(site.wb)]
fit <- lm(Chl ~ site.wb, data=river)
anova(fit)
(fit.emm <- emmeans(fit, specs="site.wb"))
contrast(fit.emm, method="revpairwise")
river[, .(Chl=mean(Chl), N=.N), by=.(site.wb)]
fit <- lm(Chl ~ site.wb, data=river[site.wb!="Site 1 - no wb"])
anova(fit)
(fit.emm <- emmeans(fit, specs="site.wb"))
contrast(fit.emm, method="revpairwise")
river[, .(Chl=mean(Chl), N=.N), by=.(site.wb)]
fit <- lm(Chl ~ site.wb, data=river[site.wb!="Site 1 - no wb" & site.wb!="Site 2 - no wb"])
anova(fit)
(fit.emm <- emmeans(fit, specs="site.wb"))
contrast(fit.emm, method="revpairwise")
river[, .(Chl=mean(Chl), N=.N), by=.(site.wb)]
fit <- lm(Chl ~ site.wb, data=river)
anova(fit)
(fit.emm <- emmeans(fit, specs="site.wb"))
contrast(fit.emm, method="revpairwise")
river[, .(Chl=mean(Chl), N=.N), by=.(site.wb)]
fit <- lm(Chl ~ site.wb, data=river[site!="Site 1"])
anova(fit)
(fit.emm <- emmeans(fit, specs="site.wb"))
contrast(fit.emm, method="revpairwise")
river[, .(Chl=mean(Chl), N=.N), by=.(site.wb)]
fit <- lm(Chl ~ site.wb, data=river)
anova(fit)
(fit.emm <- emmeans(fit, specs="site.wb"))
contrast(fit.emm, method="revpairwise")
head(river)
river
river[, site.wb2:=ifelse(site!="Site 3", site, site.wb)]
river
# river[, .(Chl=mean(Chl), N=.N), by=.(site.wb)]
# fit <- lm(Chl ~ site.wb, data=river)
# anova(fit)
# (fit.emm <- emmeans(fit, specs="site.wb"))
# contrast(fit.emm, method="revpairwise")
river[, site.wb2:=ifelse(site!="Site 3", site, site.wb)]
fit <- lm(Chl ~ site.wb2, data=river)
anova(fit)
(fit.emm <- emmeans(fit, specs="site.wb2"))
contrast(fit.emm, method="revpairwise")
fit <- lm(ln_hippo_prop_rem ~ treatment_recode*days, data=decomp[treatment_recode!="wb"])
summary(aov(fit))
fit <- lm(ln_hippo_prop_rem ~ treatment_recode*days, data=decomp[treatment_recode!="aged"])
summary(aov(fit))
fit <- lm(ln_hippo_prop_rem ~ treatment_recode*days, data=decomp[treatment_recode!="fresh"])
summary(aov(fit))
library(ggplot2)
library(readxl)
library(data.table)
library(lme4)
library(lmerTest)
library(emmeans)
library(cowplot)
data_folder <- "../data"
folder <- "Data from The significance of prey avoidance behaviour for the maintenance of a predator colour polymorphism"
# images need to be moved to /static/images/data from.../image.png
knitr_path <- FALSE # run = TRUE to debug
source("../R/clean_label.R") # bookdown
knitr_path <- TRUE
TRUE
fn <- "Data from prey avoidance and predator colour polymorphism.xlsx"
file_path <- paste(data_folder, folder, fn, sep="/")
sheet_1 <- "Experiment 1"
exp1 <- data.table(read_excel(file_path, sheet=sheet_1))
exp1[, Flower:=factor(Flower)]
exp1[, Spider:=factor(Spider)]
sheet_2 <- "Experiment 2"
exp2 <- data.table(read_excel(file_path, sheet=sheet_2))
colnames(exp2) <- clean_label(colnames(exp2))
exp2[, Treatment_1:=factor(Treatment_1)]
exp2[, Treatment_2:=factor(Treatment_2)]
exp2[, Day_fac:=factor(Day)] # create a new column with day as factor
names(exp2)
exp2[, .SD, .SDcols=c("Rejects_in_offer_1", "Rejects_in_offer_2", "Behaviour_upon_acceptance_offer_2")]
view(exp2[, .SD, .SDcols=c("Rejects_in_offer_1", "Rejects_in_offer_2", "Behaviour_upon_acceptance_offer_2")])
as.data.frame(exp2[, .SD, .SDcols=c("Rejects_in_offer_1", "Rejects_in_offer_2", "Behaviour_upon_acceptance_offer_2")])
# "NA" in $Rejects_in_offer_2$ is probably "not accepted" and not missing
# this will convert these to missing, so think about how this effects subsequent analysis
exp2[, Rejects_in_offer_2:=as.numeric(Rejects_in_offer_2)] # recode NA as missing
exp2[, Rejects_in_offer_2b:=ifelse(is.na(Rejects_in_offer_2),10,Rejects_in_offer_2)] # recode NA to 10
exp2[, R1:=ifelse(Behaviour_upon_acceptance_offer_2=="NA",0,1)]
exp2[R1==1, R2:=ifelse(Behaviour_upon_acceptance_offer_2=="Feed", 1, 0)] #subset
exp2[, R2b:=ifelse(Behaviour_upon_acceptance_offer_2=="Feed", 1, 0)] # v NA + Land
exp2[, R3:=ifelse(Rejects_in_offer_2 > Rejects_in_offer_1, 1, 0)]
exp2[, R3b:=ifelse(Rejects_in_offer_2b > Rejects_in_offer_1, 1, 0)]
anova(glm(R3 ~ Treatment_1 + Treatment_2 + Treatment_1:Treatment_2, family=binomial, data=exp2), test="Chisq")
anova(glm(R3b ~ Treatment_1 + Treatment_2 + Treatment_1:Treatment_2, family=binomial, data=exp2), test="Chisq")
exp2$Behaviour_upon_acceptance_offer_2
str(exp2)
exp2[!is.na(Rejects_in_offer_2), R1b:=ifelse(Behaviour_upon_acceptance_offer_2=="NA",0,1)] # coded NA as "not accepted"
exp2[,R1]
exp2[,R1b]
# NA="not accepted" in Rejects_in_offer_2, recoded missing value as "not accepted"
anova(glm(R1 ~ Treatment_1 + Day + Treatment_1:Day, family=binomial, data=exp2), test="Chisq")
# NA="not accepted" in Rejects_in_offer_2, left missing value as missing
anova(glm(R1.na ~ Treatment_1 + Day + Treatment_1:Day, family=binomial, data=exp2), test="Chisq")
# R1: accepted (Land | Feed) vs. neither
exp2[, R1:=ifelse(Behaviour_upon_acceptance_offer_2=="NA",0,1)] # coded NA as "not accepted"
exp2[, R1.na:=ifelse(Behaviour_upon_acceptance_offer_2.na=="NA",0,1)] # coded NA "not accepted" but the entry with the missing value is missing
# Again "NA" is probably "not accepted". But there is one missing value assigned NA. is this "NA" or truly missing?
which_na <- which(is.na(exp2$Behaviour_upon_acceptance_offer_2))
# copy column which will leave the value as missing
exp2[, Behaviour_upon_acceptance_offer_2.na:=Behaviour_upon_acceptance_offer_2]
# change value in original column to "NA"
exp2[which_na, Behaviour_upon_acceptance_offer_2:="NA"]
# make both columns factors
exp2[, Behaviour_upon_acceptance_offer_2:=factor(Behaviour_upon_acceptance_offer_2)]
exp2[, Behaviour_upon_acceptance_offer_2.na:=factor(Behaviour_upon_acceptance_offer_2.na)]
# R1: accepted (Land | Feed) vs. neither
exp2[, R1:=ifelse(Behaviour_upon_acceptance_offer_2=="NA",0,1)] # coded NA as "not accepted"
exp2[, R1.na:=ifelse(Behaviour_upon_acceptance_offer_2.na=="NA",0,1)] # coded NA "not accepted" but the entry with the missing value is missing
exp2[!is.na(Rejects_in_offer_2), R1b:=ifelse(Behaviour_upon_acceptance_offer_2=="NA",0,1)] # coded NA as "not accepted"
# R2:
exp2[R1==1, R2:=ifelse(Behaviour_upon_acceptance_offer_2=="Feed", 1, 0)] #subset
exp2[, R2b:=ifelse(Behaviour_upon_acceptance_offer_2=="Feed", 1, 0)] # v NA + Land
# R3:
exp2[, R3:=ifelse(Rejects_in_offer_2 > Rejects_in_offer_1, 1, 0)] # NA coded as missing
exp2[, R3b:=ifelse(Rejects_in_offer_2b > Rejects_in_offer_1, 1, 0)] # NA recoded as 10
# NA="not accepted" in Rejects_in_offer_2, recoded missing value as "not accepted"
anova(glm(R1 ~ Treatment_1 + Day + Treatment_1:Day, family=binomial, data=exp2), test="Chisq")
# NA="not accepted" in Rejects_in_offer_2, left missing value as missing
anova(glm(R1.na ~ Treatment_1 + Day + Treatment_1:Day, family=binomial, data=exp2), test="Chisq")
# NA=missing in Rejects_in_offer_2
anova(glm(R1b ~ Treatment_1 + Day + Treatment_1:Day, family=binomial, data=exp2), test="Chisq")
# with missing value recoded as "NA"
anova(glm(R2b ~ Treatment_1 + Treatment_2 + Day + Treatment_1:Treatment_2 +
Treatment_1:Day, family=binomial, data=exp2), test="Chisq")
exp2[, R2b.na:=ifelse(Behaviour_upon_acceptance_offer_2.na=="Feed", 1, 0)] # v NA + Land
# subset (Feed vs. Land, not accepted excluded)
anova(glm(R2 ~ Treatment_1 + Treatment_2 + Day + Treatment_1:Treatment_2 +
Treatment_1:Day, family=binomial, data=exp2), test="Chisq")
# Feed vs. Land + not accepted, with missing value recoded as "NA"
anova(glm(R2b ~ Treatment_1 + Treatment_2 + Day + Treatment_1:Treatment_2 +
Treatment_1:Day, family=binomial, data=exp2), test="Chisq")
# Feed vs. Land + not accepted, with missing value left as NA
anova(glm(R2b.na ~ Treatment_1 + Treatment_2 + Day + Treatment_1:Treatment_2 +
Treatment_1:Day, family=binomial, data=exp2), test="Chisq")
exp2$Rejects_in_offer_2
exp2$Rejects_in_offer_2b
exp2$R3
exp2$R3b
exp2$Rejects_in_offer_1
head(exp1)
n_combos <- length(levels(exp1$Flower)) * length(levels(exp1$Spider))
n_blocks <- nrow(exp1)/n_combos
exp1[, block:=rep(1:n_blocks, each=n_combos)]
# trial-and-error for item 952
inc <- which(exp1$Response==13)
exp1[inc, Response:=1]
exp1[, R1:=ifelse(Response==1, 1, 0)] # 1= accept, 0 = not accept
exp1[, R2:=ifelse(Response==1, 1,
ifelse(Response==2, 0, NA))] # 1= accept, 0 = reject, NA = ignore
exp1[, R3:=ifelse(Response==3, 0, 1)] # 1 = inspect (reject or accept), 0 = ignore
exp1[, Spider_binary:=ifelse(Spider=="control", "control", "spider")]
exp1[inc, R1:=1]
m1.R1 <- glmer(R1 ~ Flower*Spider_binary + (1|block), family=binomial, data=exp1)
drop1(m1.R1, test="Chisq")
m2.R1 <- glmer(R1 ~ Flower + Spider_binary + (1|block), family=binomial, data=exp1)
drop1(m2.R1, test="Chisq")
exp1[inc, R1:=0]
m1.R1 <- glmer(R1 ~ Flower*Spider_binary + (1|block), family=binomial, data=exp1)
drop1(m1.R1, test="Chisq")
m2.R1 <- glmer(R1 ~ Flower + Spider_binary + (1|block), family=binomial, data=exp1)
drop1(m2.R1, test="Chisq")
exp1[inc, R1:=NA]
m1.R1 <- glmer(R1 ~ Flower*Spider_binary + (1|block), family=binomial, data=exp1)
drop1(m1.R1, test="Chisq")
m2.R1 <- glmer(R1 ~ Flower + Spider_binary + (1|block), family=binomial, data=exp1)
drop1(m2.R1, test="Chisq")
m1.R1 <- glmer(R1 ~ Flower*Spider_binary + (1|block), family=binomial, data=exp1)
(test1a <- drop1(m1.R1, test="Chisq"))
m2.R1 <- glmer(R1 ~ Flower + Spider_binary + (1|block), family=binomial, data=exp1)
(test1b <- drop1(m2.R1, test="Chisq"))
m1.R2 <- glmer(R2 ~ Flower*Spider_binary + (1|block), family=binomial, data=exp1)
(test2a <- drop1(m1.R2, test="Chisq"))
m2.R2 <- glmer(R2 ~ Flower + Spider_binary + (1|block), family=binomial, data=exp1)
(test2b <- drop1(m2.R2, test="Chisq"))
m1.R3 <- glmer(R3 ~ Flower*Spider_binary + (1|block), family=binomial, data=exp1)
(test3a <- drop1(m1.R3, test="Chisq"))
m2.R3 <- glmer(R3 ~ Flower + Spider_binary + (1|block), family=binomial, data=exp1)
(test3b <- drop1(m2.R3, test="Chisq"))
spider <- c(test1b["Spider_binary", "LRT"], test2b["Spider_binary", "LRT"], test3b["Spider_binary", "LRT"])
flower <- c(test1b["Flower", "LRT"], test2b["Flower", "LRT"], test3b["Flower", "LRT"])
inter <- c(test1a["Flower:Spider_binary", "LRT"], test2a["Flower:Spider_binary", "LRT"], test3a["Flower:Spider_binary", "LRT"])
responses <- c("Accepted v not accepted","Accepted v rejected", "Inspected v not inspected")
table1 <- data.table(Response=responses,
Spider=spider,
Flower=flower,
Interaction=inter)
knitr::kable(table1, digits=c(NA, 3, 3, 3))
fn <- "table1.png"
if(knitr_path==TRUE){
image_path <- paste("../images", folder, fn, sep="/")
}else{
image_path <- paste("/images", folder, fn, sep="/")
}
knitr::include_graphics(image_path)
inc
exp1[inc]
exp1[inc, R1:=1]
m1.R1 <- glmer(R1 ~ Flower*Spider_binary + (1|block), family=binomial, data=exp1)
drop1(m1.R1, test="Chisq")
m2.R1 <- glmer(R1 ~ Flower + Spider_binary + (1|block), family=binomial, data=exp1)
drop1(m2.R1, test="Chisq")
exp1[inc, R1:=0]
m1.R1 <- glmer(R1 ~ Flower*Spider_binary + (1|block), family=binomial, data=exp1)
drop1(m1.R1, test="Chisq")
m2.R1 <- glmer(R1 ~ Flower + Spider_binary + (1|block), family=binomial, data=exp1)
drop1(m2.R1, test="Chisq")
exp1[inc, R1:=NA]
m1.R1 <- glmer(R1 ~ Flower*Spider_binary + (1|block), family=binomial, data=exp1)
drop1(m1.R1, test="Chisq")
m2.R1 <- glmer(R1 ~ Flower + Spider_binary + (1|block), family=binomial, data=exp1)
drop1(m2.R1, test="Chisq")
# The first reproduces so change "13" to "1"
exp1[inc, R1:=1] # making sure that if this runs, this code is replaced as it reproduces
m1.R1 <- glmer(R1 ~ Flower*Spider_binary + (1|block), family=binomial, data=exp1)
(test1a <- drop1(m1.R1, test="Chisq"))
m2.R1 <- glmer(R1 ~ Flower + Spider_binary + (1|block), family=binomial, data=exp1)
(test1b <- drop1(m2.R1, test="Chisq"))
m1.R2 <- glmer(R2 ~ Flower*Spider_binary + (1|block), family=binomial, data=exp1)
(test2a <- drop1(m1.R2, test="Chisq"))
m2.R2 <- glmer(R2 ~ Flower + Spider_binary + (1|block), family=binomial, data=exp1)
(test2b <- drop1(m2.R2, test="Chisq"))
m1.R3 <- glmer(R3 ~ Flower*Spider_binary + (1|block), family=binomial, data=exp1)
(test3a <- drop1(m1.R3, test="Chisq"))
m2.R3 <- glmer(R3 ~ Flower + Spider_binary + (1|block), family=binomial, data=exp1)
(test3b <- drop1(m2.R3, test="Chisq"))
spider <- c(test1b["Spider_binary", "LRT"], test2b["Spider_binary", "LRT"], test3b["Spider_binary", "LRT"])
flower <- c(test1b["Flower", "LRT"], test2b["Flower", "LRT"], test3b["Flower", "LRT"])
inter <- c(test1a["Flower:Spider_binary", "LRT"], test2a["Flower:Spider_binary", "LRT"], test3a["Flower:Spider_binary", "LRT"])
responses <- c("Accepted v not accepted","Accepted v rejected", "Inspected v not inspected")
table1 <- data.table(Response=responses,
Spider=spider,
Flower=flower,
Interaction=inter)
knitr::kable(table1, digits=c(NA, 3, 3, 3))
exp2$Behaviour_upon_acceptance_offer_2
exp2$Behaviour_upon_acceptance_offer_2b
exp2$R3b
m3.R1 <- glmer(R1 ~ Flower*Spider + (1|block), family=binomial, data=exp1)
anova(m1.R1, m3.R1, test="Chisq") # this reproduces
m3.R2 <- glmer(R2 ~ Flower*Spider + (1|block), family=binomial, data=exp1)
anova(m1.R2, m3.R2, test="Chisq")
m3.R3 <- glmer(R3 ~ Flower*Spider + (1|block), family=binomial, data=exp1)
anova(m1.R3, m3.R3, test="Chisq")
m3_R1.emm <- emmeans(m3.R1, specs=c("Flower", "Spider"), type="response")
m3_R2.emm <- emmeans(m3.R2, specs=c("Flower", "Spider"), type="response")
m3_R3.emm <- emmeans(m3.R3, specs=c("Flower", "Spider"), type="response")
pd <- position_dodge(0.9)
gg1 <- ggplot(data=summary(m3_R1.emm), aes(x=Flower, y=prob, fill=Spider)) +
geom_col(position=pd) +
geom_errorbar(aes(ymin=asymp.LCL, ymax=asymp.UCL), position=pd, width=0.2) +
coord_cartesian(ylim=c(0, 0.8)) +
ggtitle("Accept") +
NULL
gg2 <- ggplot(data=summary(m3_R2.emm), aes(x=Flower, y=prob, fill=Spider)) +
geom_col(position=pd) +
geom_errorbar(aes(ymin=asymp.LCL, ymax=asymp.UCL), position=pd, width=0.2) +
coord_cartesian(ylim=c(0, 0.8)) +
ggtitle("Accept after inspection") +
NULL
gg3 <- ggplot(data=summary(m3_R3.emm), aes(x=Flower, y=prob, fill=Spider)) +
geom_col(position=pd) +
geom_errorbar(aes(ymin=asymp.LCL, ymax=asymp.UCL), position=pd, width=0.2) +
coord_cartesian(ylim=c(0, 0.8)) +
ggtitle("Inspect") +
NULL
# See myfig1 chunk for plot
fn <- "fig1.png"
if(knitr_path==TRUE){
image_path <- paste("../images", folder, fn, sep="/")
}else{
image_path <- paste("/images", folder, fn, sep="/")
}
knitr::include_graphics(image_path)
plot_grid(gg1, gg2, gg3, nrow=3)
confint(m3.R1)
exp$Day
exp2$Day
t2way(Rejects_in_offer_1 ~ DayTreatment_1, data=exp2)
install.packages(c("WRS2", "Rfit", "ART", "ARTool", "rcompanion"))
library(WRS2)
library(Rfit)
library(ART)
library(ARTool)
library(rcompanion)
t2way(Rejects_in_offer_1 ~ DayTreatment_1, data=exp2)
t2way(Rejects_in_offer_1 ~ Day*Treatment_1, data=exp2)
t2way(Rejects_in_offer_1 ~ Day*Treatment_1, data=exp2)
scheirerRayHare(Rejects_in_offer_1 ~ Day*Treatment_1, data=exp2)
anova(Rejects_in_offer_1 ~ Treatment_1*Day, data=exp2)
anova(lm(Rejects_in_offer_1 ~ Treatment_1*Day, data=exp2))
anova(lm(Rejects_in_offer_1 ~ Treatment_1*Day_fac, data=exp2))
aligned.rank.transform(Rejects_in_offer_1 ~ Day_fac*Treatment_1, data=exp2, SS.type="III")$significance
anova(lm(Rejects_in_offer_1 ~ Treatment_1*Day, data=exp2))
anova(lm(Rejects_in_offer_1 ~ Treatment_1*Day_fac, data=exp2))
aligned.rank.transform(Rejects_in_offer_1 ~ Treatment_1*Day, data=exp2, SS.type="III")$significance
aligned.rank.transform(Rejects_in_offer_1 ~ Treatment_1*Day_fac, data=exp2, SS.type="III")$significance
?t2way
t2way(Rejects_in_offer_1 ~ Day_fac*Treatment_1, data=exp2)
pbad2way(Rejects_in_offer_1 ~ Day_fac*Treatment_1, data=exp2)
?aligned.rank.transform
# parametric
anova(lm(Rejects_in_offer_1 ~ Treatment_1*Day, data=exp2)) # type 1 but just peaking at interaction
anova(lm(Rejects_in_offer_1 ~ Treatment_1*Day_fac, data=exp2)) # type 1 but just peaking at interaction
# ART package
aligned.rank.transform(Rejects_in_offer_1 ~ Treatment_1*Day, data=exp2, SS.type="III")$significance
aligned.rank.transform(Rejects_in_offer_1 ~ Treatment_1*Day_fac, data=exp2, SS.type="III")$significance
# WRS2 package
ancova(Rejects_in_offer_1 ~ Treatment_1*Day, data=exp2)
anboot(Rejects_in_offer_1 ~ Treatment_1*Day, data=exp2)
ancboot(Rejects_in_offer_1 ~ Treatment_1*Day, data=exp2)
# parametric
anova(lm(Rejects_in_offer_1 ~ Treatment_1*Day, data=exp2)) # type 1 but just peaking at interaction
anova(lm(Rejects_in_offer_1 ~ Treatment_1*Day_fac, data=exp2)) # type 1 but just peaking at interaction
# ART package
aligned.rank.transform(Rejects_in_offer_1 ~ Treatment_1*Day, data=exp2, SS.type="III")$significance
aligned.rank.transform(Rejects_in_offer_1 ~ Treatment_1*Day_fac, data=exp2, SS.type="III")$significance
# WRS2 package
ancova(Rejects_in_offer_1 ~ Treatment_1*Day, data=exp2)
#ancboot(Rejects_in_offer_1 ~ Treatment_1*Day, data=exp2)
t2way(Rejects_in_offer_1 ~ Day_fac*Treatment_1, data=exp2)
