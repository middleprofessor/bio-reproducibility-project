!is.na(get(y)) &
Population != "Ana", .(n=.N), by=.(Exp_Pop, Treatment)]
sum(n_pops$n)
sum(n_pops[n>3,n])
n_pops
# reduce to only relevant columns, stage, and delete Ana
subdata_i <- na.omit(dt[Stage==stage_j & Population %in% inc, .SD, .SDcols=c(xcols, y)])
#first get populations with n>1 in Treatment="T"
n_pops <- dt[Stage==stage_j &
!is.na(get(y)) &
Population != "Ana", .(n=.N), by=.(Population)]
n_pops
subdata <- function(dt, stage_j, xcols, y, inc_n=2){
# this is a function used several times so making a function out of it
# stage_j is the stage
# xcols is the vector of labels of the columns of factors for the model
# y is the response column label
# inc_n is the minimum n to include in the subdata
#first get populations with n>1 in Treatment="T"
n_pops <- dt[Stage==stage_j &
!is.na(get(y)) &
Population != "Ana", .(n=.N), by=.(Population)]
inc <- n_pops[n >= (5+inc_n), Population] # all Treatment="C" have n=5
# reduce to only relevant columns, stage, and delete Ana
subdata_i <- na.omit(dt[Stage==stage_j & Population %in% inc, .SD, .SDcols=c(xcols, y)])
# recode Populations to 1:n_pop; this is only way to analyze as fixed using aov
# subdata[, Population2:=Population]
popsE <- unique(subdata_i[Experience=="E", Population])
subdata_i[Population %in% popsE, Population.cross:= mapvalues(Population, from = popsE, to = as.character(1:length(popsE)))]
popsN <- unique(subdata_i[Experience=="N", Population])
subdata_i[Population %in% popsN, Population.cross:= mapvalues(Population, from = popsN, to = as.character(1:length(popsN)))]
subdata_i[, Population.cross:=factor(Population.cross)]
return(subdata_i)
}
xcols <- c("Treatment", "Experience", "Stage", "Population", "Exp_Pop")
ycols <- c("Longest_leaf", "n_Leaves", "Biomass", "Root_biomass", "Shoot_biomass", "Root.shoot_ratio")
con3 <- list(Treatment=contr.sum, Experience=contr.sum) # change the contrasts coding for the model matrix
f_table <- list()
p_table <- list()
df_table <- list()
n_table <- list()
for(stage_j in c("Seedling", "Juvenile")){
for(y in ycols){
subdata_i <- subdata(exp2, stage_j, xcols, y, inc_n=0)
# the best I can do. I explicitly ordered the terms this way to match table 1
fit3 <- lm(get(y) ~  Treatment + Experience + Population.cross%in%Experience + Treatment:Experience, contrasts=con3, data=subdata_i)
table_i <- drop1(fit3, .~., test="F") # matches JMP except Experience row
# these do not run because of singular xtxi matrix
# Anova(fit3, type="3")
# form_i <- formula(paste(y, "~ Treatment*Experience + Population.cross%in%Experience"))
# fit <- gls(form_i, weights=varIdent(form=~1|Population), data=subdata_i) # singular
if(y==ycols[1]){
f_table[[stage_j]] <- data.table(terms=row.names(table_i)[2:5],
table_i[2:5, "F value"])
p_table[[stage_j]] <- data.table(terms=row.names(table_i)[2:5],
table_i[2:5, "Pr(>F)"])
df_table[[stage_j]] <- data.table(terms=c(row.names(table_i)[2:5], "n"),
c(table_i[2:5, "Df"], nrow(subdata_i)))
}else{
f_table[[stage_j]] <- cbind(f_table[[stage_j]], table_i[2:5, "F value"])
p_table[[stage_j]] <- cbind(p_table[[stage_j]], table_i[2:5, "Pr(>F)"])
df_table[[stage_j]] <- cbind(df_table[[stage_j]], c(table_i[2:5, "Df"], nrow(subdata_i)))
}
setnames(f_table[[stage_j]], old="V2", new=y)
setnames(p_table[[stage_j]], old="V2", new=y)
setnames(df_table[[stage_j]], old="V2", new=y)
}
}
knitr::kable(df_table[["Seedling"]], digits=0, caption="df")
knitr::kable(f_table[["Seedling"]], digits=c(NA, 2, 2, 2, 2, 2, 2), caption="F-value")
knitr::kable(p_table[["Seedling"]], digits=c(NA, 3, 3, 3, 3, 3, 3), caption="P-value")
knitr::kable(df_table[["Juvenile"]], digits=0, caption="df")
knitr::kable(f_table[["Juvenile"]], digits=c(NA, 2, 2, 2, 2, 2, 2), caption="F-value")
knitr::kable(p_table[["Juvenile"]], digits=c(NA, 3, 3, 3, 3, 3, 3), caption="P-value")
subdata <- function(dt, stage_j, xcols, y, min_n=2){
# this is a function used several times so making a function out of it
# stage_j is the stage
# xcols is the vector of labels of the columns of factors for the model
# y is the response column label
# min_n is the minimum n to include in the subdata
#first get populations with n>1 in Treatment="T"
n_pops <- dt[Stage==stage_j &
!is.na(get(y)) &
Population != "Ana", .(n=.N), by=.(Population)]
inc <- n_pops[n >= (5+min_n), Population] # all Treatment="C" have n=5
# reduce to only relevant columns, stage, and delete Ana
subdata_i <- na.omit(dt[Stage==stage_j & Population %in% inc, .SD, .SDcols=c(xcols, y)])
# recode Populations to 1:n_pop; this is only way to analyze as fixed using aov
# subdata[, Population2:=Population]
popsE <- unique(subdata_i[Experience=="E", Population])
subdata_i[Population %in% popsE, Population.cross:= mapvalues(Population, from = popsE, to = as.character(1:length(popsE)))]
popsN <- unique(subdata_i[Experience=="N", Population])
subdata_i[Population %in% popsN, Population.cross:= mapvalues(Population, from = popsN, to = as.character(1:length(popsN)))]
subdata_i[, Population.cross:=factor(Population.cross)]
return(subdata_i)
}
xcols <- c("Treatment", "Experience", "Stage", "Population", "Exp_Pop")
ycols <- c("Longest_leaf", "n_Leaves", "Biomass", "Root_biomass", "Shoot_biomass", "Root.shoot_ratio")
con3 <- list(Treatment=contr.sum, Experience=contr.sum) # change the contrasts coding for the model matrix
f_table <- list()
p_table <- list()
df_table <- list()
n_table <- list()
for(stage_j in c("Seedling", "Juvenile")){
for(y in ycols){
subdata_i <- subdata(exp2, stage_j, xcols, y, min_n=2)
# the best I can do. I explicitly ordered the terms this way to match table 1
fit3 <- lm(get(y) ~  Treatment + Experience + Population.cross%in%Experience + Treatment:Experience, contrasts=con3, data=subdata_i)
table_i <- drop1(fit3, .~., test="F") # matches JMP except Experience row
# these do not run because of singular xtxi matrix
# Anova(fit3, type="3")
# form_i <- formula(paste(y, "~ Treatment*Experience + Population.cross%in%Experience"))
# fit <- gls(form_i, weights=varIdent(form=~1|Population), data=subdata_i) # singular
if(y==ycols[1]){
f_table[[stage_j]] <- data.table(terms=row.names(table_i)[2:5],
table_i[2:5, "F value"])
p_table[[stage_j]] <- data.table(terms=row.names(table_i)[2:5],
table_i[2:5, "Pr(>F)"])
df_table[[stage_j]] <- data.table(terms=c(row.names(table_i)[2:5], "n"),
c(table_i[2:5, "Df"], nrow(subdata_i)))
}else{
f_table[[stage_j]] <- cbind(f_table[[stage_j]], table_i[2:5, "F value"])
p_table[[stage_j]] <- cbind(p_table[[stage_j]], table_i[2:5, "Pr(>F)"])
df_table[[stage_j]] <- cbind(df_table[[stage_j]], c(table_i[2:5, "Df"], nrow(subdata_i)))
}
setnames(f_table[[stage_j]], old="V2", new=y)
setnames(p_table[[stage_j]], old="V2", new=y)
setnames(df_table[[stage_j]], old="V2", new=y)
}
}
knitr::kable(df_table[["Seedling"]], digits=0, caption="df")
knitr::kable(f_table[["Seedling"]], digits=c(NA, 2, 2, 2, 2, 2, 2), caption="F-value")
knitr::kable(p_table[["Seedling"]], digits=c(NA, 3, 3, 3, 3, 3, 3), caption="P-value")
knitr::kable(df_table[["Juvenile"]], digits=0, caption="df")
knitr::kable(f_table[["Juvenile"]], digits=c(NA, 2, 2, 2, 2, 2, 2), caption="F-value")
knitr::kable(p_table[["Juvenile"]], digits=c(NA, 3, 3, 3, 3, 3, 3), caption="P-value")
knitr::kable(df_table[["Juvenile"]], digits=0, caption="df")
knitr::kable(f_table[["Juvenile"]], digits=c(NA, 2, 2, 2, 2, 2, 2), caption="F-value")
knitr::kable(p_table[["Juvenile"]], digits=c(NA, 3, 3, 3, 3, 3, 3), caption="P-value")
xcols <- c("Treatment", "Experience", "Stage", "Population", "Exp_Pop")
ycols <- c("Longest_leaf", "n_Leaves", "Biomass", "Root_biomass", "Shoot_biomass", "Root.shoot_ratio")
con3 <- list(Treatment=contr.sum, Experience=contr.sum) # change the contrasts coding for the model matrix
f_table <- list()
p_table <- list()
df_table <- list()
n_table <- list()
for(stage_j in c("Seedling", "Juvenile")){
for(y in ycols){
subdata_i <- subdata(exp2, stage_j, xcols, y, min_n=0)
# the best I can do. I explicitly ordered the terms this way to match table 1
fit3 <- lm(get(y) ~  Treatment + Experience + Population.cross%in%Experience + Treatment:Experience, contrasts=con3, data=subdata_i)
table_i <- drop1(fit3, .~., test="F") # matches JMP except Experience row
# these do not run because of singular xtxi matrix
# Anova(fit3, type="3")
# form_i <- formula(paste(y, "~ Treatment*Experience + Population.cross%in%Experience"))
# fit <- gls(form_i, weights=varIdent(form=~1|Population), data=subdata_i) # singular
if(y==ycols[1]){
f_table[[stage_j]] <- data.table(terms=row.names(table_i)[2:5],
table_i[2:5, "F value"])
p_table[[stage_j]] <- data.table(terms=row.names(table_i)[2:5],
table_i[2:5, "Pr(>F)"])
df_table[[stage_j]] <- data.table(terms=c(row.names(table_i)[2:5], "n"),
c(table_i[2:5, "Df"], nrow(subdata_i)))
}else{
f_table[[stage_j]] <- cbind(f_table[[stage_j]], table_i[2:5, "F value"])
p_table[[stage_j]] <- cbind(p_table[[stage_j]], table_i[2:5, "Pr(>F)"])
df_table[[stage_j]] <- cbind(df_table[[stage_j]], c(table_i[2:5, "Df"], nrow(subdata_i)))
}
setnames(f_table[[stage_j]], old="V2", new=y)
setnames(p_table[[stage_j]], old="V2", new=y)
setnames(df_table[[stage_j]], old="V2", new=y)
}
}
knitr::kable(df_table[["Seedling"]], digits=0, caption="df")
knitr::kable(f_table[["Seedling"]], digits=c(NA, 2, 2, 2, 2, 2, 2), caption="F-value")
knitr::kable(p_table[["Seedling"]], digits=c(NA, 3, 3, 3, 3, 3, 3), caption="P-value")
knitr::kable(df_table[["Juvenile"]], digits=0, caption="df")
knitr::kable(f_table[["Juvenile"]], digits=c(NA, 2, 2, 2, 2, 2, 2), caption="F-value")
knitr::kable(p_table[["Juvenile"]], digits=c(NA, 3, 3, 3, 3, 3, 3), caption="P-value")
library(ggplot2)
library(readxl)
library(data.table)
library(emmeans)
library(nlme)
library(lmerTest)
library(car)
library(doBy)
library(plyr)
library(cowplot)
data_folder <- "../data"
folder <- "Data from Response of bluebunch wheatgrass to invasion- differences in competitive ability among invader-experienced and naÃ¯ve populations"
# images need to be moved to /static/images/data from.../image.png
knitr_path <- FALSE # run = TRUE to debug
source("../R/clean_label.R") # bookdown
fn <- "Gibson_invasion_response_data.xlsx"
file_path <- paste(data_folder, folder, fn, sep="/")
sheet_i <- "Germination"
exp1 <- data.table(read_excel(file_path, sheet=sheet_i))
colnames(exp1) <- clean_label(colnames(exp1))
setnames(exp1, "Type", "Experience")
sheet_i <- "Traits"
exp2 <- data.table(read_excel(file_path, sheet=sheet_i, na="x"))
colnames(exp2) <- clean_label(colnames(exp2))
exp2[, Treatment:=factor(Treatment)]
exp2[, Experience:=factor(Population_Type)]
exp2[, Stage:=ifelse(as.character(Date)=="2012-04-30","Seedling", "Juvenile")]
exp2[, Exp_Pop:=factor(paste(Experience,Population,sep="."))]
n_seed <- exp2[!is.na(Longest_leaf) & Stage=="Seedling", .(N=.N), by=.(Treatment, Experience, Population)]
n_seed_wide <- dcast(n_seed, Experience + Population ~ Treatment, value.var="N")
orderBy(~ Population + Experience, data=n_seed_wide)
n_juv <- exp2[!is.na(Longest_leaf) & Stage=="Juvenile", .(N=.N), by=.(Treatment, Experience, Population)]
n_juv_wide <- dcast(n_juv, Experience + Population ~ Treatment, value.var="N")
orderBy(~ Population + Experience, data=n_juv_wide)
# orderBy(~ Experience + Population, data=n_juv_wide[Population!="Ana"])
subdata <- function(dt, stage_j, xcols, y, min_n=2){
# this is a function used several times so making a function out of it
# stage_j is the stage
# xcols is the vector of labels of the columns of factors for the model
# y is the response column label
# min_n is the minimum n to include in the subdata
#first get populations with n>1 in Treatment="T"
n_pops <- dt[Stage==stage_j &
!is.na(get(y)) &
Population != "Ana", .(n=.N), by=.(Population)]
inc <- n_pops[n >= (5+min_n), Population] # all Treatment="C" have n=5
# reduce to only relevant columns, stage, and delete Ana
subdata_i <- na.omit(dt[Stage==stage_j & Population %in% inc, .SD, .SDcols=c(xcols, y)])
# recode Populations to 1:n_pop; this is only way to analyze as fixed using aov
# subdata[, Population2:=Population]
popsE <- unique(subdata_i[Experience=="E", Population])
subdata_i[Population %in% popsE, Population.cross:= mapvalues(Population, from = popsE, to = as.character(1:length(popsE)))]
popsN <- unique(subdata_i[Experience=="N", Population])
subdata_i[Population %in% popsN, Population.cross:= mapvalues(Population, from = popsN, to = as.character(1:length(popsN)))]
subdata_i[, Population.cross:=factor(Population.cross)]
return(subdata_i)
}
exp2.b <- exp2[!is.na(Longest_leaf) & Population!="Ana",]
counts <- exp2.b[, .(N=.N), by=.(Treatment, Experience, Population, Stage, Exp_Pop)]
exp2.b <- merge(exp2.b, counts, by=c("Treatment", "Experience", "Population", "Stage", "Exp_Pop"))
counts[, .(N=.N), by=.(Stage, Treatment, Experience)]
counts2 <- counts[N>1, .(N=.N), by=.(Stage, Population, Treatment)]
counts2[, .(N=.N), by=.(Stage, Treatment)]
# orderBy(~ Experience + Population, data=n_juv_wide[Population!="Ana"])
# orderBy(~ Experience + Population, data=n_juv_wide[Population!="Ana"])
xcols <- c("Treatment", "Experience", "Stage", "Population", "Exp_Pop")
ycols <- c("Longest_leaf", "n_Leaves", "Biomass", "Root_biomass", "Shoot_biomass", "Root.shoot_ratio")
con3 <- list(Treatment=contr.sum, Experience=contr.sum) # change the contrasts coding for the model matrix
f_table <- list()
p_table <- list()
df_table <- list()
n_table <- list()
for(stage_j in c("Seedling", "Juvenile")){
for(y in ycols){
subdata_i <- subdata(exp2, stage_j, xcols, y, min_n=0)
# the best I can do. I explicitly ordered the terms this way to match table 1
fit3 <- lm(get(y) ~  Treatment + Experience + Population.cross%in%Experience + Treatment:Experience, contrasts=con3, data=subdata_i)
table_i <- drop1(fit3, .~., test="F") # matches JMP except Experience row
# these do not run because of singular xtxi matrix
# Anova(fit3, type="3")
# form_i <- formula(paste(y, "~ Treatment*Experience + Population.cross%in%Experience"))
# fit <- gls(form_i, weights=varIdent(form=~1|Population), data=subdata_i) # singular
if(y==ycols[1]){
f_table[[stage_j]] <- data.table(terms=row.names(table_i)[2:5],
table_i[2:5, "F value"])
p_table[[stage_j]] <- data.table(terms=row.names(table_i)[2:5],
table_i[2:5, "Pr(>F)"])
df_table[[stage_j]] <- data.table(terms=c(row.names(table_i)[2:5], "n"),
c(table_i[2:5, "Df"], nrow(subdata_i)))
}else{
f_table[[stage_j]] <- cbind(f_table[[stage_j]], table_i[2:5, "F value"])
p_table[[stage_j]] <- cbind(p_table[[stage_j]], table_i[2:5, "Pr(>F)"])
df_table[[stage_j]] <- cbind(df_table[[stage_j]], c(table_i[2:5, "Df"], nrow(subdata_i)))
}
setnames(f_table[[stage_j]], old="V2", new=y)
setnames(p_table[[stage_j]], old="V2", new=y)
setnames(df_table[[stage_j]], old="V2", new=y)
}
}
fn <- "table1.png"
if(knitr_path==TRUE){
image_path <- paste("../images", folder, fn, sep="/")
}else{
image_path <- paste("/images", folder, fn, sep="/")
}
knitr::include_graphics(image_path)
knitr::kable(df_table[["Seedling"]], digits=0, caption="df")
knitr::kable(f_table[["Seedling"]], digits=c(NA, 2, 2, 2, 2, 2, 2), caption="F-value")
knitr::kable(p_table[["Seedling"]], digits=c(NA, 3, 3, 3, 3, 3, 3), caption="P-value")
knitr::kable(df_table[["Juvenile"]], digits=0, caption="df")
knitr::kable(f_table[["Juvenile"]], digits=c(NA, 2, 2, 2, 2, 2, 2), caption="F-value")
knitr::kable(p_table[["Juvenile"]], digits=c(NA, 3, 3, 3, 3, 3, 3), caption="P-value")
xcols <- c("Treatment", "Experience", "Stage", "Population", "Exp_Pop")
ycols_seed <- c("Shoot_biomass", "n_Leaves", "Root.shoot_ratio")
ycols_juv <- c("n_Leaves","Biomass", "Root_biomass")
con3 <- list(Treatment=contr.sum, Experience=contr.sum) # change the contrasts coding for the model matrix
gg_list <- list()
for(stage_j in c("Seedling", "Juvenile")){
if(stage_j=="Seedling"){
ycols <- ycols_seed}else{
ycols <- ycols_juv}
for(y in ycols){
subdata_i <- subdata(exp2.b, stage_j, xcols, y)
# modeled SE
fit3 <- lm(get(y) ~  Treatment + Experience + Population.cross%in%Experience + Treatment:Experience, contrasts=con3, data=subdata_i)
fit3.emm <- data.table(summary(emmeans(fit3, specs=c("Treatment", "Experience"))))
# raw SE (how to deal with nested?)
# pooled SE (ignore nested structure)
subdata.pool.SE <- subdata_i[, .(ybar=mean(get(y)),
SE=sd(get(y))/sqrt(.N)
), by=.(Treatment, Experience)]
# SE of pop means
# no pool (average replicates within pop)
subdata.nopool <- subdata_i[, .(ybar=mean(get(y))
), by=.(Treatment, Experience, Population)]
subdata.nopool.SE <- subdata.nopool[, .(ybar=mean(ybar),
SE=sd(ybar)/sqrt(.N)
), by=.(Treatment, Experience)]
# modeled SE
pd <- position_dodge(0.5)
gg <- ggplot(data=fit3.emm, aes(x=Treatment, y=emmean, color=Experience, group=Experience)) +
geom_point(position=pd) +
geom_line(position=pd) +
geom_errorbar(aes(min=emmean-SE, max=emmean+SE), position=pd, width=.2) +
ylab(y) +
NULL
#gg
# complete pooling
gg <- ggplot(data=subdata.pool.SE, aes(x=Treatment, y=ybar, color=Experience, group=Experience, shape=Experience)) +
geom_point(position=pd) +
geom_line(position=pd) +
geom_errorbar(aes(min=ybar-SE, max=ybar+SE), position=pd, width=.2) +
ylab(y) +
NULL
label_i <- paste(y, stage_j, sep=".")
gg_list[[label_i]] <- gg
}
}
fn <- "fig1.png"
if(knitr_path==TRUE){
image_path <- paste("../images", folder, fn, sep="/")
}else{
image_path <- paste("/images", folder, fn, sep="/")
}
knitr::include_graphics(image_path)
plot_grid(gg_list$Shoot_biomass.Seedling,
gg_list$n_Leaves.Juvenile,
gg_list$n_Leaves.Seedling,
gg_list$Biomass.Juvenile,
gg_list$Root.shoot_ratio.Seedling,
gg_list$Root_biomass.Juvenile, nrow=3, ncol=2)
# gg_list$Shoot_biomass.Seedling
# gg_list$n_Leaves.Seedling
# gg_list$Root.shoot_ratio.Seedling
con3 <- list(Treatment=contr.sum, Experience=contr.sum) # change the contrasts coding for the model matrix
# fit.full <- lm(Week_1 ~ Treatment*Experience, data=exp1, contrasts=con3)
# Anova(fit.full, type="3")
# 26 residual df suggests either this was one-way anova with something removed or an additive model
fit.add <- lm(Week_1 ~ Treatment + Experience, data=exp1, contrasts=con3)
Anova(fit.add, type="3") # replicates
# fit.one <- lm(Week_1 ~ Experience, data=exp1[Population!="Ana"])
# anova(fit.one) # obviously cannot be it given Ana is in the posthoc
fit.emm <- emmeans(fit.add, specs=c("Experience"))
# Tukey HSD
contrast(fit.emm, method="revpairwise")
# no adjustment
# contrast(fit.emm, method="revpairwise", adjust="none")
xcols <- c("Treatment", "Experience", "Population")
y <- "Longest_leaf"
subdata_i <- subdata(exp2.b, "Seedling", xcols, y)
fit <- lm(get(y) ~  Treatment + Experience + Population.cross%in%Experience + Treatment:Experience, data=subdata_i)
(fit.emm <- emmeans(fit, specs=c("Treatment")))
(fit.contrast <- contrast(fit.emm, method="revpairwise"))
subdata_i[, .(mean=mean(get(y)), sd=sd(get(y))), by=Treatment]
# rii = (b_w - b_a)/(b_w + b_a) # _w=T _a=C
xcols <- c("Treatment", "Experience", "Stage", "Population", "Exp_Pop")
ycols <- c("Longest_leaf", "n_Leaves", "Biomass", "Shoot_biomass", "Root_biomass", "Root.shoot_ratio")
subdata_i <- (exp2[Stage=="Seedling", .SD, .SDcols=c(xcols, "Biomass")])
rii.long <- subdata_i[!is.na(Biomass), .(biomass=mean(Biomass), n=.N), by=.(Treatment, Experience, Population)]
rii.1 <- rii.long[Treatment=="C",]
rii.2 <- rii.long[Treatment=="T",]
rii.wide <- merge(rii.1, rii.2, by=c("Population", "Experience"))
rii.wide[, rii:=(biomass.y - biomass.x)/(biomass.y + biomass.x)]
fit <- lm(rii ~ Experience, data=rii.wide)
anova(fit)
# fig 2
rii.raw <- rii.wide[, .(rii=mean(rii), SE=sd(rii)/sqrt(.N)), by=Experience]
gg_2b <- ggplot(rii.raw, aes(x=Experience, y=rii)) +
geom_point() +
geom_errorbar(aes(ymin=rii-SE, ymax=rii+SE), width=0.2)
# rii = (b_w - b_a)/(b_w + b_a) # _w=T _a=C
xcols <- c("Treatment", "Experience", "Stage", "Population", "Exp_Pop")
ycols <- c("Longest_leaf", "n_Leaves", "Biomass", "Shoot_biomass", "Root_biomass", "Root.shoot_ratio")
subdata_i <- (exp2[Stage=="Juvenile", .SD, .SDcols=c(xcols, "Biomass")])
rii.long <- subdata_i[!is.na(Biomass), .(biomass=mean(Biomass), n=.N), by=.(Treatment, Experience, Population)]
rii.long <- rii.long[n >=3, ]
rii.1 <- rii.long[Treatment=="C",]
rii.2 <- rii.long[Treatment=="T",]
rii.wide <- merge(rii.1, rii.2, by=c("Population", "Experience"))
rii.wide[, rii:=(biomass.y - biomass.x)/(biomass.y + biomass.x)]
fit <- lm(rii ~ Experience, data=rii.wide)
anova(fit)
# fig 2
rii.raw <- rii.wide[, .(rii=mean(rii), SE=sd(rii)/sqrt(.N)), by=Experience]
gg_2d <- ggplot(rii.raw, aes(x=Experience, y=rii)) +
geom_point() +
geom_errorbar(aes(ymin=rii-SE, ymax=rii+SE), width=0.2)
# must have the subdata_i using "Juvenile"
rii.long <- subdata_i[!is.na(Biomass), .(biomass=mean(Biomass), n=.N), by=.(Treatment, Experience, Population)]
rii.1 <- rii.long[Treatment=="C",]
rii.2 <- rii.long[Treatment=="T",]
rii.wide <- merge(rii.1, rii.2, by=c("Population", "Experience"))
rii.wide[, rii:=(biomass.y - biomass.x)/(biomass.y + biomass.x)]
rii.wide
fn <- "fig2.png"
if(knitr_path==TRUE){
image_path <- paste("../images", folder, fn, sep="/")
}else{
image_path <- paste("/images", folder, fn, sep="/")
}
knitr::include_graphics(image_path)
plot_grid(gg_2b, gg_2d, nrow=2)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
library(ggplot2)
library(readxl)
library(data.table)
library(emmeans)
library(nlme)
library(lmerTest)
library(car)
library(doBy)
library(plyr)
library(cowplot)
data_folder <- "../data"
folder <- "Data from Response of bluebunch wheatgrass to invasion- differences in competitive ability among invader-experienced and naÃ¯ve populations"
# images need to be moved to /static/images/data from.../image.png
knitr_path <- FALSE # run = TRUE to debug, or HTML_document
source("../R/clean_label.R") # bookdown
fn <- "Gibson_invasion_response_data.xlsx"
file_path <- paste(data_folder, folder, fn, sep="/")
sheet_i <- "Germination"
exp1 <- data.table(read_excel(file_path, sheet=sheet_i))
colnames(exp1) <- clean_label(colnames(exp1))
setnames(exp1, "Type", "Experience")
sheet_i <- "Traits"
exp2 <- data.table(read_excel(file_path, sheet=sheet_i, na="x"))
colnames(exp2) <- clean_label(colnames(exp2))
exp2[, Treatment:=factor(Treatment)]
exp2[, Experience:=factor(Population_Type)]
exp2[, Stage:=ifelse(as.character(Date)=="2012-04-30","Seedling", "Juvenile")]
exp2[, Exp_Pop:=factor(paste(Experience,Population,sep="."))]
# rii = (b_w - b_a)/(b_w + b_a) # _w=T _a=C
xcols <- c("Treatment", "Experience", "Stage", "Population", "Exp_Pop")
ycols <- c("Longest_leaf", "n_Leaves", "Biomass", "Shoot_biomass", "Root_biomass", "Root.shoot_ratio")
subdata_i <- (exp2[Stage=="Juvenile", .SD, .SDcols=c(xcols, "Biomass")])
rii.long <- subdata_i[!is.na(Biomass), .(biomass=mean(Biomass), n=.N), by=.(Treatment, Experience, Population)]
rii.long <- rii.long[n >=3, ]
rii.1 <- rii.long[Treatment=="C",]
rii.2 <- rii.long[Treatment=="T",]
rii.wide <- merge(rii.1, rii.2, by=c("Population", "Experience"))
rii.wide[, rii:=(biomass.y - biomass.x)/(biomass.y + biomass.x)]
fit <- lm(rii ~ Experience, data=rii.wide)
anova(fit)
# fig 2
rii.raw <- rii.wide[, .(rii=mean(rii), SE=sd(rii)/sqrt(.N)), by=Experience]
gg_2d <- ggplot(rii.raw, aes(x=Experience, y=rii)) +
geom_point() +
geom_errorbar(aes(ymin=rii-SE, ymax=rii+SE), width=0.2)
# must have the subdata_i using "Juvenile"
rii.long <- subdata_i[!is.na(Biomass), .(biomass=mean(Biomass), n=.N), by=.(Treatment, Experience, Population)]
rii.1 <- rii.long[Treatment=="C",]
rii.2 <- rii.long[Treatment=="T",]
rii.wide <- merge(rii.1, rii.2, by=c("Population", "Experience"))
rii.wide[, rii:=(biomass.y - biomass.x)/(biomass.y + biomass.x)]
rii.wide
# starting with rii.wide of juvenile keeping all pops
excl <- c("LHK", "LHP#1", "MCLP", "MJP")
all_pops <- unique(exp2$Population)
incl <- setdiff(all_pops, excl)
rii.wide.pub <- rii.wide[Population %in% incl]
fit <- lm(rii ~ Experience, data=rii.wide.pub)
anova(fit)
fit <- lm(rii ~ Experience, data=rii.wide.pub[Population != "Ana"])
anova(fit)
# fig 2 - based on published fig 2d, Ana is excluded
rii.raw <- rii.wide.pub[Population != "Ana", .(rii=mean(rii), SE=sd(rii)/sqrt(.N)), by=Experience]
gg_2d <- ggplot(rii.raw, aes(x=Experience, y=rii)) +
geom_point() +
geom_errorbar(aes(ymin=rii-SE, ymax=rii+SE), width=0.2)
fn <- "fig2.png"
if(knitr_path==TRUE){
image_path <- paste("../images", folder, fn, sep="/")
}else{
image_path <- paste("/images", folder, fn, sep="/")
}
knitr::include_graphics(image_path)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
