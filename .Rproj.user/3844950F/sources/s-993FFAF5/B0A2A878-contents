# meaning of slope in ANCOVA-like models
# Jeffrey A. Walker
# October 27, 2017
# motivator: "model containing x1=age (years) and x2=sex (0=male 1=female). Coefficient of age (beta_1) is the change in the mean of y for males when age increases by 1 year. It is also the change in y per unit increase in age for females. beta_2 is the female minus male mean difference in y for two subjects of the same age." - Harrell Jr, Frank E., and James C. Slaughter. "Introduction to biostatistics for biomedical research." (2001). p. 10-29
# I infer from the above that b1 is the slope within the male group. This isn't correct. It is the slope of y on the residuals of x2 on x1.
library(data.table)
n <- 15
x1 <- rep(c(0,1),each=n) #sex dummy
b1 <- 0.5 # females are .5 bigger at any level of x2
b2 <- 1 # slope of y on x2
coef_types <- c('full','residualized','male','average', 'adjusted')
niter <- 100
b <- matrix(numeric(length(coef_types)*niter), nrow=niter)
colnames(b) <- coef_types
diff_x2 <- numeric(niter)
for(iter in 1:niter){
  x2 <- rnorm(n*2)
  #x2 <- rep(c(0, .3, .6, .9, 1.2),n*2/5)
  diff_x2[iter] <- mean(x2[x1==0]) - mean(x2[x1==1])
  y <- b1*x1 + b2*x2 + rnorm(n*2)
  sex <- factor(ifelse(x1==0,'male','female'),c('male','female'))
  fd <- data.table(sex=sex,x1=x1,x2=x2,y=as.numeric(y))
  qplot(sex, y)
  qplot(x2, y, color=sex)
  # the full model
  b[iter, 'full'] <- coefficients(lm(y~sex + x2, data=fd))['x2']
  # the residualized x2
  x2.sex <- residuals(lm(x2~sex, data=fd))
  b[iter, 'residualized'] <- coefficients(lm(y~x2.sex, data=fd))['x2.sex']
  # How I infer Harrel's statement
  b[iter, 'male'] <- coefficients(lm(y~x2, data=fd[sex=='male']))['x2'] 
  # same as above, this works because males are the reference level of sex
  coefficients(lm(y~sex*x2, data=fd))['x2']
  # the average of the male and female slopes
  b[iter, 'average'] <- (0.5*coefficients(lm(y~x2, data=fd[sex=='male'])) + 0.5*coefficients(lm(y~x2, data=fd[sex=='female'])))['x2']
  b[iter, 'adjusted'] <- coefficients(lm(residuals(lm(y~sex))~x2, data=fd))['x2']
}
round(b,4)
qplot(y=(b[,'adjusted']-b[,'full']), x=diff_x2) # adjusted is correct if groups have same mean in x2
qplot(y=(b[,'average']-b[,'full']), x=diff_x2) # still not correct so whole distribution has to be same in x2.

# model "the same value in the other x"
coef_types <- c('full','residualized','constant_x1','N','dx')
niter <- 1000
b <- matrix(numeric(length(coef_types)*niter), nrow=niter)
colnames(b) <- coef_types
res <- data.table(NULL)
for(dx in c(0,1)){
  for(iter in 1:niter){
    n <- 10^5
    z <- rnorm(n)
    beta <- 0.6 # cor(x1,x2) = .6^2 = 0.36
    x1 <- beta*z + sqrt(1-beta^2)*rnorm(n)
    x2 <- beta*z + sqrt(1-beta^2)*rnorm(n)
    cor(x1,x2)
    y <- 1.5*x1 + 2.5*x2 + rnorm(n)*2
    
    b[iter, 'full'] <- coefficients(lm(y~x1 + x2))['x2']
    x2.x1 <- residuals(lm(x2~x1))
    b[iter, 'residualized'] <- coefficients(lm(y~x2.x1))['x2.x1']
    tol <- 0.01
    inc <- which(x1 > dx-tol & x1 < dx+tol)
    b[iter, 'constant_x1'] <- coefficients(lm(y[inc]~x2[inc]))['x2[inc]']
    b[iter, 'N'] <- length(inc)
    b[iter, 'dx'] <- dx
  }
  res <- rbind(res,data.table(b))
}

res[,error:=constant_x1-full]
qplot(x=dx,y=error,data=res, geom='boxplot',group=dx) 
res[,.(mean=mean(constant_x1-full),rmse=sqrt(mean((constant_x1-full)^2))), by=dx]




n <- 10^2
z <- rnorm(n)
c <- 0.6
r <- c^2
x1 <- c*z + sqrt(1-r)*rnorm(n)
x2 <- c*z + sqrt(1-r)*rnorm(n)
a <- 0.5
b <- -.3
y <- a*x1 + b*x2 + sqrt(1-a^2 - b^2 - 2*a*b*r)*rnorm(n)
var(y)
cor(x1,x2)

x1.2 <- residuals(lm(x1~x2))
coefficients(lm(y~x1 + x2))
coefficients(lm(y~x1.2))


